var searchIndex = {};
searchIndex['named'] = {"items":[[5,"main","named","Main method for running the named server.\nAs of this writing, this will panic on any invalid input. At this top level binary is the only\n part Trust-DNS where panics are allowed.",null,{"inputs":[],"output":null}]],"paths":[]};
searchIndex['trust_dns'] = {"items":[[5,"version","trust_dns","",null,{"inputs":[],"output":{"name":"str"}}],[0,"logger","","",null,null],[3,"TrustDnsLogger","trust_dns::logger","",null,null],[11,"new","","",0,{"inputs":[{"name":"trustdnslogger"},{"name":"loglevel"}],"output":{"name":"trustdnslogger"}}],[11,"init","","",0,{"inputs":[{"name":"trustdnslogger"}],"output":{"name":"result"}}],[11,"enable_logging","","",0,{"inputs":[{"name":"trustdnslogger"},{"name":"loglevel"}],"output":null}],[11,"enabled","","",0,{"inputs":[{"name":"trustdnslogger"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"log","","",0,{"inputs":[{"name":"trustdnslogger"},{"name":"logrecord"}],"output":null}],[0,"rr","trust_dns","",null,null],[0,"record_type","trust_dns::rr","",null,null],[4,"RecordType","trust_dns::rr::record_type","",null,null],[13,"A","","",1,null],[13,"AAAA","","",1,null],[13,"ANY","","",1,null],[13,"AXFR","","",1,null],[13,"CNAME","","",1,null],[13,"DNSKEY","","",1,null],[13,"DS","","",1,null],[13,"IXFR","","",1,null],[13,"MX","","",1,null],[13,"NS","","",1,null],[13,"NULL","","",1,null],[13,"NSEC","","",1,null],[13,"NSEC3","","",1,null],[13,"NSEC3PARAM","","",1,null],[13,"OPT","","",1,null],[13,"PTR","","",1,null],[13,"RRSIG","","",1,null],[13,"SIG","","",1,null],[13,"SOA","","",1,null],[13,"SRV","","",1,null],[13,"TXT","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"recordtype"}],"output":{"name":"recordtype"}}],[11,"hash","","",1,null],[11,"eq","","",1,{"inputs":[{"name":"recordtype"},{"name":"recordtype"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"recordtype"},{"name":"recordtype"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"recordtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Convert from RecordType to &str",1,{"inputs":[{"name":"recordtype"},{"name":"str"}],"output":{"name":"decoderesult"}}],[11,"from_u16","","Convert from RecordType to &str",1,{"inputs":[{"name":"recordtype"},{"name":"u16"}],"output":{"name":"decoderesult"}}],[11,"read","","",1,{"inputs":[{"name":"recordtype"},{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",1,{"inputs":[{"name":"recordtype"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"recordtype"},{"name":"recordtype"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"recordtype"},{"name":"self"}],"output":{"name":"ordering"}}],[0,"dns_class","trust_dns::rr","",null,null],[4,"DNSClass","trust_dns::rr::dns_class","",null,null],[13,"IN","","",2,null],[13,"CH","","",2,null],[13,"HS","","",2,null],[13,"NONE","","",2,null],[13,"ANY","","",2,null],[13,"OPT","","",2,null],[11,"clone","","",2,{"inputs":[{"name":"dnsclass"}],"output":{"name":"dnsclass"}}],[11,"hash","","",2,null],[11,"eq","","",2,{"inputs":[{"name":"dnsclass"},{"name":"dnsclass"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"dnsclass"},{"name":"dnsclass"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"dnsclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Convert from &str to DNSClass",2,{"inputs":[{"name":"dnsclass"},{"name":"str"}],"output":{"name":"decoderesult"}}],[11,"from_u16","","Convert from u16 to DNSClass",2,{"inputs":[{"name":"dnsclass"},{"name":"u16"}],"output":{"name":"decoderesult"}}],[11,"for_opt","","",2,{"inputs":[{"name":"dnsclass"},{"name":"u16"}],"output":{"name":"self"}}],[11,"read","","",2,{"inputs":[{"name":"dnsclass"},{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",2,{"inputs":[{"name":"dnsclass"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"dnsclass"},{"name":"dnsclass"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"dnsclass"},{"name":"self"}],"output":{"name":"ordering"}}],[0,"resource","trust_dns::rr","",null,null],[3,"Record","trust_dns::rr::resource","",null,null],[11,"clone","","",3,{"inputs":[{"name":"record"}],"output":{"name":"record"}}],[11,"fmt","","",3,{"inputs":[{"name":"record"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",3,{"inputs":[{"name":"record"},{"name":"record"}],"output":{"name":"ordering"}}],[11,"hash","","",3,null],[11,"new","","Creates a not very useful empty record, use the setters to build a more useful object\nThere are no optional elements in this object, defaults are an empty name, type A, class IN,\nttl of 0 and the 0.0.0.0 ip address.",3,{"inputs":[{"name":"record"}],"output":{"name":"record"}}],[11,"name","","",3,{"inputs":[{"name":"record"},{"name":"name"}],"output":{"name":"self"}}],[11,"add_name","","",3,{"inputs":[{"name":"record"},{"name":"string"}],"output":{"name":"self"}}],[11,"rr_type","","",3,{"inputs":[{"name":"record"},{"name":"recordtype"}],"output":{"name":"self"}}],[11,"dns_class","","",3,{"inputs":[{"name":"record"},{"name":"dnsclass"}],"output":{"name":"self"}}],[11,"ttl","","",3,{"inputs":[{"name":"record"},{"name":"u32"}],"output":{"name":"self"}}],[11,"rdata","","",3,{"inputs":[{"name":"record"},{"name":"rdata"}],"output":{"name":"self"}}],[11,"get_name","","",3,{"inputs":[{"name":"record"}],"output":{"name":"name"}}],[11,"get_rr_type","","",3,{"inputs":[{"name":"record"}],"output":{"name":"recordtype"}}],[11,"get_dns_class","","",3,{"inputs":[{"name":"record"}],"output":{"name":"dnsclass"}}],[11,"get_ttl","","",3,{"inputs":[{"name":"record"}],"output":{"name":"u32"}}],[11,"get_rdata","","",3,{"inputs":[{"name":"record"}],"output":{"name":"rdata"}}],[11,"read","","parse a resource record line example:\nWARNING: the record_bytes is 100% consumed and destroyed in this parsing process",3,{"inputs":[{"name":"record"},{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",3,{"inputs":[{"name":"record"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"eq","","",3,{"inputs":[{"name":"record"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"record"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"record"},{"name":"record"}],"output":{"name":"option"}}],[0,"record_data","trust_dns::rr","",null,null],[4,"RData","trust_dns::rr::record_data","3.3. Standard RRs",null,null],[13,"A","","",4,null],[12,"address","trust_dns::rr::record_data::RData","",4,null],[13,"AAAA","trust_dns::rr::record_data","",4,null],[12,"address","trust_dns::rr::record_data::RData","",4,null],[13,"CNAME","trust_dns::rr::record_data","",4,null],[12,"cname","trust_dns::rr::record_data::RData","",4,null],[13,"DNSKEY","trust_dns::rr::record_data","",4,null],[12,"zone_key","trust_dns::rr::record_data::RData","",4,null],[12,"secure_entry_point","","",4,null],[12,"revoke","","",4,null],[12,"algorithm","","",4,null],[12,"public_key","","",4,null],[13,"DS","trust_dns::rr::record_data","",4,null],[12,"key_tag","trust_dns::rr::record_data::RData","",4,null],[12,"algorithm","","",4,null],[12,"digest_type","","",4,null],[12,"digest","","",4,null],[13,"MX","trust_dns::rr::record_data","",4,null],[12,"preference","trust_dns::rr::record_data::RData","",4,null],[12,"exchange","","",4,null],[13,"NULL","trust_dns::rr::record_data","",4,null],[12,"anything","trust_dns::rr::record_data::RData","",4,null],[13,"NS","trust_dns::rr::record_data","",4,null],[12,"nsdname","trust_dns::rr::record_data::RData","",4,null],[13,"NSEC","trust_dns::rr::record_data","",4,null],[12,"next_domain_name","trust_dns::rr::record_data::RData","",4,null],[12,"type_bit_maps","","",4,null],[13,"NSEC3","trust_dns::rr::record_data","",4,null],[12,"hash_algorithm","trust_dns::rr::record_data::RData","",4,null],[12,"opt_out","","",4,null],[12,"iterations","","",4,null],[12,"salt","","",4,null],[12,"next_hashed_owner_name","","",4,null],[12,"type_bit_maps","","",4,null],[13,"NSEC3PARAM","trust_dns::rr::record_data","",4,null],[12,"hash_algorithm","trust_dns::rr::record_data::RData","",4,null],[12,"opt_out","","",4,null],[12,"iterations","","",4,null],[12,"salt","","",4,null],[13,"OPT","trust_dns::rr::record_data","",4,null],[12,"option_rdata","trust_dns::rr::record_data::RData","",4,null],[13,"PTR","trust_dns::rr::record_data","",4,null],[12,"ptrdname","trust_dns::rr::record_data::RData","",4,null],[13,"SIG","trust_dns::rr::record_data","",4,null],[12,"type_covered","trust_dns::rr::record_data::RData","",4,null],[12,"algorithm","","",4,null],[12,"num_labels","","",4,null],[12,"original_ttl","","",4,null],[12,"sig_expiration","","",4,null],[12,"sig_inception","","",4,null],[12,"key_tag","","",4,null],[12,"signer_name","","",4,null],[12,"sig","","",4,null],[13,"SOA","trust_dns::rr::record_data","",4,null],[12,"mname","trust_dns::rr::record_data::RData","",4,null],[12,"rname","","",4,null],[12,"serial","","",4,null],[12,"refresh","","",4,null],[12,"retry","","",4,null],[12,"expire","","",4,null],[12,"minimum","","",4,null],[13,"SRV","trust_dns::rr::record_data","",4,null],[12,"priority","trust_dns::rr::record_data::RData","",4,null],[12,"weight","","",4,null],[12,"port","","",4,null],[12,"target","","",4,null],[13,"TXT","trust_dns::rr::record_data","",4,null],[12,"txt_data","trust_dns::rr::record_data::RData","",4,null],[11,"clone","trust_dns::rr::record_data","",4,{"inputs":[{"name":"rdata"}],"output":{"name":"rdata"}}],[11,"hash","","",4,null],[11,"eq","","",4,{"inputs":[{"name":"rdata"},{"name":"rdata"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"rdata"},{"name":"rdata"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"rdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","",4,{"inputs":[{"name":"rdata"},{"name":"recordtype"},{"name":"vec"},{"name":"option"}],"output":{"name":"parseresult"}}],[11,"read","","",4,{"inputs":[{"name":"rdata"},{"name":"bindecoder"},{"name":"recordtype"},{"name":"u16"}],"output":{"name":"decoderesult"}}],[11,"emit","","",4,{"inputs":[{"name":"rdata"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"rdata"},{"name":"rdata"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"rdata"},{"name":"self"}],"output":{"name":"ordering"}}],[0,"domain","trust_dns::rr","",null,null],[3,"Name","trust_dns::rr::domain","TODO: all Names should be stored in a global \"intern\" space, and then everything that uses\n them should be through references. As a workaround the Strings are all Rc as well as the array\nTODO: Currently this probably doesn't support binary names, it would be nice to do that.",null,null],[11,"hash","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"name"}],"output":{"name":"name"}}],[11,"eq","","",5,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[{"name":"name"}],"output":{"name":"self"}}],[11,"root","","",5,{"inputs":[{"name":"name"}],"output":{"name":"self"}}],[11,"is_root","","",5,{"inputs":[{"name":"name"}],"output":{"name":"bool"}}],[11,"label","","inline builder",5,{"inputs":[{"name":"name"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_labels","","for mutating over time",5,{"inputs":[{"name":"name"},{"name":"vec"}],"output":{"name":"self"}}],[11,"prepend_label","","prepend the String to the label",5,{"inputs":[{"name":"name"},{"name":"rc"}],"output":{"name":"self"}}],[11,"add_label","","appends the String to this label at the end",5,{"inputs":[{"name":"name"},{"name":"rc"}],"output":{"name":"self"}}],[11,"append","","appends the other to this name",5,{"inputs":[{"name":"name"},{"name":"self"}],"output":{"name":"self"}}],[11,"base_name","","Trims off the first part of the name, to help with searching for the domain piece",5,{"inputs":[{"name":"name"}],"output":{"name":"name"}}],[11,"zone_of","","returns true if the name components of self are all present at the end of name",5,{"inputs":[{"name":"name"},{"name":"self"}],"output":{"name":"bool"}}],[11,"num_labels","","",5,{"inputs":[{"name":"name"}],"output":{"name":"u8"}}],[11,"len","","returns the length in bytes of the labels. '.' counts as 1",5,{"inputs":[{"name":"name"}],"output":{"name":"usize"}}],[11,"parse","","",5,{"inputs":[{"name":"name"},{"name":"str"},{"name":"option"}],"output":{"name":"parseresult"}}],[11,"emit_as_canonical","","",5,{"inputs":[{"name":"name"},{"name":"binencoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"read","","parses the chain of labels\n this has a max of 255 octets, with each label being less than 63.\n all names will be stored lowercase internally.\nThis will consume the portions of the Vec which it is reading...",5,{"inputs":[{"name":"name"},{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",5,{"inputs":[{"name":"name"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"fmt","","",5,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",5,{"inputs":[{"name":"name"},{"name":"usize"}],"output":{"name":"string"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"name"},{"name":"self"}],"output":{"name":"ordering"}}],[0,"dnssec","trust_dns::rr","",null,null],[3,"Signer","trust_dns::rr::dnssec","",null,null],[3,"SupportedAlgorithms","","",null,null],[3,"TrustAnchor","","",null,null],[4,"Algorithm","","",null,null],[13,"RSASHA1","","DO NOT USE, SHA1 is a compromised hashing function, it is here for backward compatability",6,null],[13,"RSASHA256","","",6,null],[13,"RSASHA1NSEC3SHA1","","DO NOT USE, SHA1 is a compromised hashing function, it is here for backward compatability",6,null],[13,"RSASHA512","","",6,null],[4,"DigestType","","",null,null],[13,"SHA1","","",7,null],[13,"SHA256","","",7,null],[13,"SHA384","","",7,null],[13,"SHA512","","",7,null],[4,"Nsec3HashAlgorithm","","",null,null],[13,"SHA1","","",8,null],[11,"fmt","","",6,{"inputs":[{"name":"algorithm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",6,{"inputs":[{"name":"algorithm"},{"name":"algorithm"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"algorithm"},{"name":"algorithm"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"algorithm"},{"name":"algorithm"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"algorithm"},{"name":"algorithm"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"algorithm"},{"name":"algorithm"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"algorithm"},{"name":"algorithm"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"algorithm"},{"name":"algorithm"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"algorithm"},{"name":"algorithm"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"algorithm"}],"output":{"name":"algorithm"}}],[11,"sign","","",6,null],[11,"verify","","",6,null],[11,"from_u8","","http://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml",6,{"inputs":[{"name":"algorithm"},{"name":"u8"}],"output":{"name":"decoderesult"}}],[11,"hash_len","","length in bytes that the hash portion of this function will produce",6,{"inputs":[{"name":"algorithm"}],"output":{"name":"usize"}}],[11,"public_key_from_vec","","",6,null],[11,"public_key_to_vec","","",6,{"inputs":[{"name":"algorithm"},{"name":"pkey"}],"output":{"name":"vec"}}],[11,"read","","",6,{"inputs":[{"name":"algorithm"},{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",6,{"inputs":[{"name":"algorithm"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"from","","",6,{"inputs":[{"name":"algorithm"},{"name":"str"}],"output":{"name":"algorithm"}}],[11,"fmt","","",7,{"inputs":[{"name":"digesttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",7,{"inputs":[{"name":"digesttype"},{"name":"digesttype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"digesttype"},{"name":"digesttype"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"digesttype"},{"name":"digesttype"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"digesttype"},{"name":"digesttype"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"digesttype"},{"name":"digesttype"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"digesttype"},{"name":"digesttype"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"digesttype"},{"name":"digesttype"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"digesttype"},{"name":"digesttype"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"digesttype"}],"output":{"name":"digesttype"}}],[11,"from_u8","","http://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml",7,{"inputs":[{"name":"digesttype"},{"name":"u8"}],"output":{"name":"decoderesult"}}],[11,"to_hash","","",7,{"inputs":[{"name":"digesttype"}],"output":{"name":"type"}}],[11,"hash","","",7,null],[11,"from","","",7,{"inputs":[{"name":"digesttype"},{"name":"algorithm"}],"output":{"name":"digesttype"}}],[11,"clone","","",8,{"inputs":[{"name":"nsec3hashalgorithm"}],"output":{"name":"nsec3hashalgorithm"}}],[11,"hash","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"nsec3hashalgorithm"},{"name":"nsec3hashalgorithm"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"nsec3hashalgorithm"},{"name":"nsec3hashalgorithm"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"nsec3hashalgorithm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","http://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml",8,{"inputs":[{"name":"nsec3hashalgorithm"},{"name":"u8"}],"output":{"name":"decoderesult"}}],[11,"hash","","",8,null],[11,"new","","",9,{"inputs":[{"name":"signer"},{"name":"algorithm"},{"name":"pkey"},{"name":"name"}],"output":{"name":"self"}}],[11,"get_algorithm","","",9,{"inputs":[{"name":"signer"}],"output":{"name":"algorithm"}}],[11,"get_signer_name","","",9,{"inputs":[{"name":"signer"}],"output":{"name":"name"}}],[11,"calculate_key_tag","","",9,{"inputs":[{"name":"signer"}],"output":{"name":"u16"}}],[11,"sign_message","","4.1.8.1 Calculating Transaction and Request SIGs",9,{"inputs":[{"name":"signer"},{"name":"message"}],"output":{"name":"vec"}}],[11,"hash_rrset","","name is the the name of the records in the rrset",9,null],[11,"verify","","verifies the hash matches the signature with the current key.",9,null],[11,"clone","","",10,{"inputs":[{"name":"supportedalgorithms"}],"output":{"name":"supportedalgorithms"}}],[11,"eq","","",10,{"inputs":[{"name":"supportedalgorithms"},{"name":"supportedalgorithms"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"supportedalgorithms"},{"name":"supportedalgorithms"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"supportedalgorithms"},{"name":"supportedalgorithms"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"supportedalgorithms"},{"name":"supportedalgorithms"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"supportedalgorithms"},{"name":"supportedalgorithms"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"supportedalgorithms"},{"name":"supportedalgorithms"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"supportedalgorithms"},{"name":"supportedalgorithms"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"supportedalgorithms"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"supportedalgorithms"}],"output":{"name":"self"}}],[11,"all","","",10,{"inputs":[{"name":"supportedalgorithms"}],"output":{"name":"self"}}],[11,"set","","",10,{"inputs":[{"name":"supportedalgorithms"},{"name":"algorithm"}],"output":null}],[11,"has","","",10,{"inputs":[{"name":"supportedalgorithms"},{"name":"algorithm"}],"output":{"name":"bool"}}],[11,"iter","","",10,{"inputs":[{"name":"supportedalgorithms"}],"output":{"name":"supportedalgorithmsiter"}}],[11,"len","","",10,{"inputs":[{"name":"supportedalgorithms"}],"output":{"name":"u16"}}],[11,"from","","",10,null],[11,"from","collections::vec","",11,{"inputs":[{"name":"vec"},{"name":"supportedalgorithms"}],"output":{"name":"vec"}}],[11,"new","trust_dns::rr::dnssec","",12,{"inputs":[{"name":"trustanchor"}],"output":{"name":"trustanchor"}}],[11,"contains","","",12,null],[0,"authority","trust_dns","The catalog module has the types necessary for storing and caching authoritative records.",null,null],[3,"Authority","trust_dns::authority","Authority is the storage method for all resource records",null,null],[3,"Catalog","","",null,null],[4,"ZoneType","","",null,null],[13,"Master","","",13,null],[13,"Slave","","",13,null],[13,"Hint","","",13,null],[13,"Forward","","",13,null],[11,"fmt","","",14,{"inputs":[{"name":"authority"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",14,{"inputs":[{"name":"authority"},{"name":"name"},{"name":"hashmap"},{"name":"zonetype"},{"name":"bool"}],"output":{"name":"authority"}}],[11,"get_origin","","",14,{"inputs":[{"name":"authority"}],"output":{"name":"name"}}],[11,"get_zone_type","","",14,{"inputs":[{"name":"authority"}],"output":{"name":"zonetype"}}],[11,"get_soa","","",14,{"inputs":[{"name":"authority"}],"output":{"name":"option"}}],[11,"get_ns","","",14,{"inputs":[{"name":"authority"}],"output":{"name":"option"}}],[11,"update","","",14,{"inputs":[{"name":"authority"},{"name":"updatemessage"}],"output":{"name":"updateresult"}}],[11,"upsert","","upserts into the resource vector\nGuarantees that SOA, CNAME only has one record, will implicitly update if they already exist",14,{"inputs":[{"name":"authority"},{"name":"name"},{"name":"record"}],"output":null}],[11,"lookup","","",14,{"inputs":[{"name":"authority"},{"name":"name"},{"name":"recordtype"},{"name":"dnsclass"}],"output":{"name":"option"}}],[11,"fmt","","",15,{"inputs":[{"name":"catalog"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",15,{"inputs":[{"name":"catalog"}],"output":{"name":"self"}}],[11,"handle_request","","",15,{"inputs":[{"name":"catalog"},{"name":"message"}],"output":{"name":"message"}}],[11,"error_msg","","",15,{"inputs":[{"name":"catalog"},{"name":"u16"},{"name":"opcode"},{"name":"responsecode"}],"output":{"name":"message"}}],[11,"upsert","","",15,{"inputs":[{"name":"catalog"},{"name":"name"},{"name":"authority"}],"output":null}],[11,"update","","The \"request\" should be an update formatted message.\nThe response will be in the alternate, all 0's format described in RFC 2136 section 3.8\nas this is more efficient.",15,{"inputs":[{"name":"catalog"},{"name":"message"}],"output":{"name":"message"}}],[11,"lookup","","",15,{"inputs":[{"name":"catalog"},{"name":"message"}],"output":{"name":"message"}}],[11,"search","","",15,{"inputs":[{"name":"catalog"},{"name":"query"}],"output":{"name":"option"}}],[6,"UpdateResult","","",null,null],[11,"clone","","",13,{"inputs":[{"name":"zonetype"}],"output":{"name":"zonetype"}}],[11,"fmt","","",13,{"inputs":[{"name":"zonetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"zonetype"},{"name":"zonetype"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"zonetype"},{"name":"zonetype"}],"output":{"name":"bool"}}],[11,"decode","","",13,{"inputs":[{"name":"zonetype"},{"name":"__d"}],"output":{"name":"result"}}],[0,"op","trust_dns","",null,null],[3,"Edns","trust_dns::op","",null,null],[0,"op_code","","",null,null],[4,"OpCode","trust_dns::op::op_code","",null,null],[13,"Query","","",16,null],[13,"Status","","",16,null],[13,"Notify","","",16,null],[13,"Update","","",16,null],[11,"clone","","",16,{"inputs":[{"name":"opcode"}],"output":{"name":"opcode"}}],[11,"partial_cmp","","",16,{"inputs":[{"name":"opcode"},{"name":"opcode"}],"output":{"name":"option"}}],[11,"lt","","",16,{"inputs":[{"name":"opcode"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"le","","",16,{"inputs":[{"name":"opcode"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"gt","","",16,{"inputs":[{"name":"opcode"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"ge","","",16,{"inputs":[{"name":"opcode"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"eq","","",16,{"inputs":[{"name":"opcode"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"opcode"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"opcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",16,{"inputs":[{"name":"opcode"},{"name":"u8"}],"output":{"name":"self"}}],[0,"response_code","trust_dns::op","",null,null],[4,"ResponseCode","trust_dns::op::response_code","",null,null],[13,"NoError","","",17,null],[13,"FormErr","","",17,null],[13,"ServFail","","",17,null],[13,"NXDomain","","",17,null],[13,"NotImp","","",17,null],[13,"Refused","","",17,null],[13,"YXDomain","","",17,null],[13,"YXRRSet","","",17,null],[13,"NXRRSet","","",17,null],[13,"NotAuth","","",17,null],[13,"NotZone","","",17,null],[13,"BADVERS","","",17,null],[13,"BADSIG","","",17,null],[13,"BADKEY","","",17,null],[13,"BADTIME","","",17,null],[13,"BADMODE","","",17,null],[13,"BADNAME","","",17,null],[13,"BADALG","","",17,null],[13,"BADTRUNC","","",17,null],[13,"BADCOOKIE","","",17,null],[11,"clone","","",17,{"inputs":[{"name":"responsecode"}],"output":{"name":"responsecode"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"responsecode"},{"name":"responsecode"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"responsecode"},{"name":"responsecode"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"responsecode"},{"name":"responsecode"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"responsecode"},{"name":"responsecode"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"responsecode"},{"name":"responsecode"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"responsecode"},{"name":"responsecode"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"responsecode"},{"name":"responsecode"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"responsecode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"low","","returns the lower 4 bits of the response code (for the original header portion of the code)",17,{"inputs":[{"name":"responsecode"}],"output":{"name":"u8"}}],[11,"high","","returns the high 12 bits for the edns portion of the response code",17,{"inputs":[{"name":"responsecode"}],"output":null}],[11,"from","","",17,{"inputs":[{"name":"responsecode"},{"name":"u8"},{"name":"u8"}],"output":{"name":"responsecode"}}],[11,"to_str","","",17,{"inputs":[{"name":"responsecode"}],"output":{"name":"str"}}],[11,"from","","",17,{"inputs":[{"name":"responsecode"},{"name":"u16"}],"output":{"name":"self"}}],[0,"message","trust_dns::op","",null,null],[3,"Message","trust_dns::op::message","By default Message is a Query. Use the Message::as_update() to create and update, or\nMessage::new_update()",null,null],[8,"UpdateMessage","","to reduce errors in using the Message struct as an Update, this will do the call throughs\nto properly do that.",null,null],[10,"add_zone","","",18,{"inputs":[{"name":"updatemessage"},{"name":"query"}],"output":null}],[10,"add_pre_requisite","","",18,{"inputs":[{"name":"updatemessage"},{"name":"record"}],"output":null}],[10,"add_all_pre_requisites","","",18,null],[10,"add_update","","",18,{"inputs":[{"name":"updatemessage"},{"name":"record"}],"output":null}],[10,"add_all_updates","","",18,null],[10,"add_additional","","",18,{"inputs":[{"name":"updatemessage"},{"name":"record"}],"output":null}],[10,"get_zones","","",18,null],[10,"get_pre_requisites","","",18,null],[10,"get_updates","","",18,null],[10,"get_additional","","",18,null],[10,"get_sig0","","returns the sig0, i.e. signed record, for verifying the sending and package integrity\n RFC 2535 section 4\nthis should be the final record in the additional section of the Message",18,null],[10,"sign","","",18,{"inputs":[{"name":"updatemessage"},{"name":"signer"},{"name":"u32"}],"output":null}],[11,"eq","","",19,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",19,{"inputs":[{"name":"message"}],"output":{"name":"self"}}],[11,"truncate","","",19,{"inputs":[{"name":"message"}],"output":{"name":"self"}}],[11,"id","","",19,{"inputs":[{"name":"message"},{"name":"u16"}],"output":{"name":"self"}}],[11,"message_type","","",19,{"inputs":[{"name":"message"},{"name":"messagetype"}],"output":{"name":"self"}}],[11,"op_code","","",19,{"inputs":[{"name":"message"},{"name":"opcode"}],"output":{"name":"self"}}],[11,"authoritative","","",19,{"inputs":[{"name":"message"},{"name":"bool"}],"output":{"name":"self"}}],[11,"truncated","","",19,{"inputs":[{"name":"message"},{"name":"bool"}],"output":{"name":"self"}}],[11,"recursion_desired","","",19,{"inputs":[{"name":"message"},{"name":"bool"}],"output":{"name":"self"}}],[11,"recursion_available","","",19,{"inputs":[{"name":"message"},{"name":"bool"}],"output":{"name":"self"}}],[11,"authentic_data","","",19,{"inputs":[{"name":"message"},{"name":"bool"}],"output":{"name":"self"}}],[11,"checking_disabled","","",19,{"inputs":[{"name":"message"},{"name":"bool"}],"output":{"name":"self"}}],[11,"response_code","","",19,{"inputs":[{"name":"message"},{"name":"responsecode"}],"output":{"name":"self"}}],[11,"add_query","","",19,{"inputs":[{"name":"message"},{"name":"query"}],"output":{"name":"self"}}],[11,"add_answer","","",19,{"inputs":[{"name":"message"},{"name":"record"}],"output":{"name":"self"}}],[11,"add_all_answers","","",19,null],[11,"add_name_server","","",19,{"inputs":[{"name":"message"},{"name":"record"}],"output":{"name":"self"}}],[11,"add_all_name_servers","","",19,null],[11,"add_additional","","",19,{"inputs":[{"name":"message"},{"name":"record"}],"output":{"name":"self"}}],[11,"set_edns","","",19,{"inputs":[{"name":"message"},{"name":"edns"}],"output":null}],[11,"add_sig0","","",19,{"inputs":[{"name":"message"},{"name":"record"}],"output":{"name":"self"}}],[11,"get_id","","",19,{"inputs":[{"name":"message"}],"output":{"name":"u16"}}],[11,"get_message_type","","",19,{"inputs":[{"name":"message"}],"output":{"name":"messagetype"}}],[11,"get_op_code","","",19,{"inputs":[{"name":"message"}],"output":{"name":"opcode"}}],[11,"is_authoritative","","",19,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"is_truncated","","",19,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"is_recursion_desired","","",19,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"is_recursion_available","","",19,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"is_authentic_data","","",19,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"is_checking_disabled","","",19,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"get_response_code","","",19,{"inputs":[{"name":"message"}],"output":{"name":"responsecode"}}],[11,"get_queries","","",19,null],[11,"get_answers","","",19,null],[11,"get_name_servers","","",19,null],[11,"get_additional","","",19,null],[11,"get_edns","","",19,{"inputs":[{"name":"message"}],"output":{"name":"option"}}],[11,"get_max_payload","","",19,{"inputs":[{"name":"message"}],"output":{"name":"u16"}}],[11,"get_version","","",19,{"inputs":[{"name":"message"}],"output":{"name":"u8"}}],[11,"add_zone","","",19,{"inputs":[{"name":"message"},{"name":"query"}],"output":null}],[11,"add_pre_requisite","","",19,{"inputs":[{"name":"message"},{"name":"record"}],"output":null}],[11,"add_all_pre_requisites","","",19,null],[11,"add_update","","",19,{"inputs":[{"name":"message"},{"name":"record"}],"output":null}],[11,"add_all_updates","","",19,null],[11,"add_additional","","",19,{"inputs":[{"name":"message"},{"name":"record"}],"output":null}],[11,"get_zones","","",19,null],[11,"get_pre_requisites","","",19,null],[11,"get_updates","","",19,null],[11,"get_additional","","",19,null],[11,"get_sig0","","",19,null],[11,"sign","","",19,{"inputs":[{"name":"message"},{"name":"signer"},{"name":"u32"}],"output":null}],[11,"read","","",19,{"inputs":[{"name":"message"},{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",19,{"inputs":[{"name":"message"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[0,"header","trust_dns::op","",null,null],[3,"Header","trust_dns::op::header","",null,null],[4,"MessageType","","",null,null],[13,"Query","","",20,null],[13,"Response","","",20,null],[11,"partial_cmp","","",21,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"header"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"messagetype"}],"output":{"name":"messagetype"}}],[11,"partial_cmp","","",20,{"inputs":[{"name":"messagetype"},{"name":"messagetype"}],"output":{"name":"option"}}],[11,"lt","","",20,{"inputs":[{"name":"messagetype"},{"name":"messagetype"}],"output":{"name":"bool"}}],[11,"le","","",20,{"inputs":[{"name":"messagetype"},{"name":"messagetype"}],"output":{"name":"bool"}}],[11,"gt","","",20,{"inputs":[{"name":"messagetype"},{"name":"messagetype"}],"output":{"name":"bool"}}],[11,"ge","","",20,{"inputs":[{"name":"messagetype"},{"name":"messagetype"}],"output":{"name":"bool"}}],[11,"eq","","",20,{"inputs":[{"name":"messagetype"},{"name":"messagetype"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"messagetype"},{"name":"messagetype"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"messagetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","A default Header, not very useful.",21,{"inputs":[{"name":"header"}],"output":{"name":"self"}}],[11,"len","","",21,{"inputs":[{"name":"header"}],"output":{"name":"usize"}}],[11,"id","","",21,{"inputs":[{"name":"header"},{"name":"u16"}],"output":{"name":"self"}}],[11,"message_type","","",21,{"inputs":[{"name":"header"},{"name":"messagetype"}],"output":{"name":"self"}}],[11,"op_code","","",21,{"inputs":[{"name":"header"},{"name":"opcode"}],"output":{"name":"self"}}],[11,"authoritative","","",21,{"inputs":[{"name":"header"},{"name":"bool"}],"output":{"name":"self"}}],[11,"truncated","","",21,{"inputs":[{"name":"header"},{"name":"bool"}],"output":{"name":"self"}}],[11,"recursion_desired","","",21,{"inputs":[{"name":"header"},{"name":"bool"}],"output":{"name":"self"}}],[11,"recursion_available","","",21,{"inputs":[{"name":"header"},{"name":"bool"}],"output":{"name":"self"}}],[11,"authentic_data","","",21,{"inputs":[{"name":"header"},{"name":"bool"}],"output":{"name":"self"}}],[11,"checking_disabled","","",21,{"inputs":[{"name":"header"},{"name":"bool"}],"output":{"name":"self"}}],[11,"response_code","","",21,{"inputs":[{"name":"header"},{"name":"responsecode"}],"output":{"name":"self"}}],[11,"query_count","","",21,{"inputs":[{"name":"header"},{"name":"u16"}],"output":{"name":"self"}}],[11,"answer_count","","",21,{"inputs":[{"name":"header"},{"name":"u16"}],"output":{"name":"self"}}],[11,"name_server_count","","",21,{"inputs":[{"name":"header"},{"name":"u16"}],"output":{"name":"self"}}],[11,"additional_count","","",21,{"inputs":[{"name":"header"},{"name":"u16"}],"output":{"name":"self"}}],[11,"get_id","","",21,{"inputs":[{"name":"header"}],"output":{"name":"u16"}}],[11,"get_message_type","","",21,{"inputs":[{"name":"header"}],"output":{"name":"messagetype"}}],[11,"get_op_code","","",21,{"inputs":[{"name":"header"}],"output":{"name":"opcode"}}],[11,"is_authoritative","","",21,{"inputs":[{"name":"header"}],"output":{"name":"bool"}}],[11,"is_truncated","","",21,{"inputs":[{"name":"header"}],"output":{"name":"bool"}}],[11,"is_recursion_desired","","",21,{"inputs":[{"name":"header"}],"output":{"name":"bool"}}],[11,"is_recursion_available","","",21,{"inputs":[{"name":"header"}],"output":{"name":"bool"}}],[11,"is_authentic_data","","",21,{"inputs":[{"name":"header"}],"output":{"name":"bool"}}],[11,"is_checking_disabled","","",21,{"inputs":[{"name":"header"}],"output":{"name":"bool"}}],[11,"get_response_code","","",21,{"inputs":[{"name":"header"}],"output":{"name":"u8"}}],[11,"get_query_count","","for query this is the count of query records\nfor updates this is the zone count (only 1 allowed)",21,{"inputs":[{"name":"header"}],"output":{"name":"u16"}}],[11,"get_answer_count","","for queries this is the answer section and record count\nfor updates this is the prerequisite count",21,{"inputs":[{"name":"header"}],"output":{"name":"u16"}}],[11,"get_name_server_count","","for queries this is the nameservers which are authorities for the SOA of the Record\nfor updates this is the update record count",21,{"inputs":[{"name":"header"}],"output":{"name":"u16"}}],[11,"get_additional_count","","number of records in the additional section, same for queries and updates.",21,{"inputs":[{"name":"header"}],"output":{"name":"u16"}}],[11,"clone","","This is a specialized clone which clones all the fields but the counts\nhandy for setting the count fields before sending over the wire.",21,{"inputs":[{"name":"header"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"read","","",21,{"inputs":[{"name":"header"},{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",21,{"inputs":[{"name":"header"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[0,"query","trust_dns::op","",null,null],[3,"Query","trust_dns::op::query","",null,null],[11,"fmt","","",22,{"inputs":[{"name":"query"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"query"},{"name":"query"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"query"},{"name":"query"}],"output":{"name":"bool"}}],[11,"new","","return a default query with an empty name and A, IN for the query_type and query_class",22,{"inputs":[{"name":"query"}],"output":{"name":"self"}}],[11,"name","","replaces name with the new name",22,{"inputs":[{"name":"query"},{"name":"name"}],"output":{"name":"self"}}],[11,"query_type","","",22,{"inputs":[{"name":"query"},{"name":"recordtype"}],"output":{"name":"self"}}],[11,"query_class","","",22,{"inputs":[{"name":"query"},{"name":"dnsclass"}],"output":{"name":"self"}}],[11,"get_name","","",22,{"inputs":[{"name":"query"}],"output":{"name":"name"}}],[11,"get_query_type","","",22,{"inputs":[{"name":"query"}],"output":{"name":"recordtype"}}],[11,"get_query_class","","",22,{"inputs":[{"name":"query"}],"output":{"name":"dnsclass"}}],[11,"read","","",22,{"inputs":[{"name":"query"},{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",22,{"inputs":[{"name":"query"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"clone","trust_dns::op","",23,{"inputs":[{"name":"edns"}],"output":{"name":"edns"}}],[11,"eq","","",23,{"inputs":[{"name":"edns"},{"name":"edns"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"edns"},{"name":"edns"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"edns"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",23,{"inputs":[{"name":"edns"}],"output":{"name":"self"}}],[11,"get_rcode_high","","",23,{"inputs":[{"name":"edns"}],"output":{"name":"u8"}}],[11,"get_version","","",23,{"inputs":[{"name":"edns"}],"output":{"name":"u8"}}],[11,"is_dnssec_ok","","",23,{"inputs":[{"name":"edns"}],"output":{"name":"bool"}}],[11,"get_max_payload","","",23,{"inputs":[{"name":"edns"}],"output":{"name":"u16"}}],[11,"get_option","","",23,{"inputs":[{"name":"edns"},{"name":"ednscode"}],"output":{"name":"option"}}],[11,"get_options","","",23,{"inputs":[{"name":"edns"}],"output":{"name":"hashmap"}}],[11,"set_rcode_high","","",23,{"inputs":[{"name":"edns"},{"name":"u8"}],"output":null}],[11,"set_version","","",23,{"inputs":[{"name":"edns"},{"name":"u8"}],"output":null}],[11,"set_dnssec_ok","","",23,{"inputs":[{"name":"edns"},{"name":"bool"}],"output":null}],[11,"set_max_payload","","",23,{"inputs":[{"name":"edns"},{"name":"u16"}],"output":null}],[11,"set_option","","",23,{"inputs":[{"name":"edns"},{"name":"ednscode"},{"name":"ednsoption"}],"output":null}],[11,"from","","",23,{"inputs":[{"name":"edns"},{"name":"record"}],"output":{"name":"self"}}],[11,"from","trust_dns::rr::resource","This returns a Resource Record that is formatted for Edns(0).\nNote: the rcode_high value is only part of the rcode, the rest is part of the base",3,{"inputs":[{"name":"record"},{"name":"edns"}],"output":{"name":"record"}}],[11,"from","collections::vec","",11,{"inputs":[{"name":"vec"},{"name":"ednsoption"}],"output":{"name":"vec"}}],[0,"udp","trust_dns","",null,null],[3,"UdpHandler","trust_dns::udp","",null,null],[3,"UdpClientConnection","","",null,null],[4,"UdpState","","",null,null],[13,"Reading","","",24,null],[13,"Writing","","",24,null],[13,"Done","","",24,null],[11,"new_client","","",25,{"inputs":[{"name":"udphandler"},{"name":"socketaddr"},{"name":"message"}],"output":{"name":"self"}}],[11,"new_server","","",25,{"inputs":[{"name":"udphandler"},{"name":"udpsocket"},{"name":"arc"}],"output":{"name":"option"}}],[11,"remote_addr","","",25,{"inputs":[{"name":"udphandler"}],"output":{"name":"socketaddr"}}],[11,"serialize_msg","","",25,{"inputs":[{"name":"udphandler"},{"name":"vec"},{"name":"message"}],"output":{"name":"vec"}}],[11,"handle_message","","",25,{"inputs":[{"name":"udphandler"},{"name":"udpsocket"},{"name":"eventset"}],"output":{"name":"result"}}],[11,"new","","",26,{"inputs":[{"name":"udpclientconnection"},{"name":"socketaddr"}],"output":{"name":"clientresult"}}],[11,"send","","",26,{"inputs":[{"name":"udpclientconnection"},{"name":"vec"}],"output":{"name":"clientresult"}}],[11,"fmt","","",26,{"inputs":[{"name":"udpclientconnection"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"tcp","trust_dns","",null,null],[3,"TcpHandler","trust_dns::tcp","",null,null],[3,"TcpClientConnection","","",null,null],[4,"TcpState","","",null,null],[13,"WillReadLength","","",27,null],[13,"WillRead","","",27,null],[12,"length","trust_dns::tcp::TcpState","",27,null],[13,"WillWriteLength","trust_dns::tcp","",27,null],[13,"WillWrite","","",27,null],[13,"Done","","",27,null],[11,"fmt","","",28,{"inputs":[{"name":"tcphandler"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_client_handler","","initializes this handler with the intention to write first",28,{"inputs":[{"name":"tcphandler"},{"name":"tcpstream"},{"name":"option"}],"output":{"name":"self"}}],[11,"new_server_handler","","initializes this handler with the intention to read first",28,{"inputs":[{"name":"tcphandler"},{"name":"tcpstream"},{"name":"arc"}],"output":{"name":"self"}}],[11,"get_stream","","",28,{"inputs":[{"name":"tcphandler"}],"output":{"name":"tcpstream"}}],[11,"get_events","","",28,{"inputs":[{"name":"tcphandler"}],"output":{"name":"eventset"}}],[11,"set_buffer","","",28,{"inputs":[{"name":"tcphandler"},{"name":"vec"}],"output":null}],[11,"remove_buffer","","",28,{"inputs":[{"name":"tcphandler"}],"output":{"name":"vec"}}],[11,"get_buffer","","",28,null],[11,"get_buffer_mut","","",28,{"inputs":[{"name":"tcphandler"}],"output":{"name":"vec"}}],[11,"handle_message","","The result may be an error case of ErrorKind::WouldBlock, which means that the handler\nhandler should be put back into the event loop for more processing.",28,{"inputs":[{"name":"tcphandler"},{"name":"eventset"}],"output":{"name":"result"}}],[11,"reset","","resets the state of the handler to perform more requests if desired.\nclears the buffers and sets the state back to the initial state",28,{"inputs":[{"name":"tcphandler"}],"output":null}],[11,"fmt","","",27,{"inputs":[{"name":"tcpstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"tcpstate"}],"output":{"name":"tcpstate"}}],[11,"eq","","",27,{"inputs":[{"name":"tcpstate"},{"name":"tcpstate"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"tcpstate"},{"name":"tcpstate"}],"output":{"name":"bool"}}],[11,"initial_state","","",27,{"inputs":[{"name":"tcpstate"},{"name":"tcptype"}],"output":{"name":"self"}}],[11,"next_state","","",27,{"inputs":[{"name":"tcpstate"},{"name":"tcptype"}],"output":{"name":"self"}}],[11,"new","","",29,{"inputs":[{"name":"tcpclientconnection"},{"name":"socketaddr"}],"output":{"name":"clientresult"}}],[11,"send","","",29,{"inputs":[{"name":"tcpclientconnection"},{"name":"vec"}],"output":{"name":"clientresult"}}],[11,"fmt","","",29,{"inputs":[{"name":"tcpclientconnection"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"client","trust_dns","",null,null],[3,"Client","trust_dns::client","The Client is abstracted over either trust_dns::tcp::TcpClientConnection or\ntrust_dns::udp::UdpClientConnection, usage of TCP or UDP is up to the user. Some DNS servers\ndisallow TCP in some cases, so if TCP double check if UDP works.",null,null],[11,"new","","name_server to connect to with default port 53",30,{"inputs":[{"name":"client"},{"name":"c"}],"output":{"name":"client"}}],[11,"secure_query","","When the resolver receives an answer via the normal DNS lookup process, it then checks to\nmake sure that the answer is correct. Then starts\nwith verifying the DS and DNSKEY records at the DNS root. Then use the DS\nrecords for the top level domain found at the root, e.g. 'com', to verify the DNSKEY\nrecords in the 'com' zone. From there see if there is a DS record for the\nsubdomain, e.g. 'example.com', in the 'com' zone, and if there is use the\nDS record to verify a DNSKEY record found in the 'example.com' zone. Finally,\nverify the RRSIG record found in the answer for the rrset, e.g. 'www.example.com'.",30,{"inputs":[{"name":"client"},{"name":"name"},{"name":"dnsclass"},{"name":"recordtype"}],"output":{"name":"clientresult"}}],[11,"query","","",30,{"inputs":[{"name":"client"},{"name":"name"},{"name":"dnsclass"},{"name":"recordtype"}],"output":{"name":"clientresult"}}],[8,"ClientConnection","","",null,null],[10,"send","","send the message to the specified address",31,{"inputs":[{"name":"clientconnection"},{"name":"vec"}],"output":{"name":"clientresult"}}],[0,"server","trust_dns","",null,null],[3,"Server","trust_dns::server","",null,null],[11,"new","","",32,{"inputs":[{"name":"server"},{"name":"catalog"}],"output":{"name":"server"}}],[11,"register_socket","","register a UDP socket. Should be bound before calling this.",32,{"inputs":[{"name":"server"},{"name":"udpsocket"}],"output":null}],[11,"register_listener","","register a TcpListener to the Server. This should already be bound to either an IPv6 or an\nIPv4 address.",32,{"inputs":[{"name":"server"},{"name":"tcplistener"}],"output":null}],[11,"listen","","TODO how to do threads? should we do a bunch of listener threads and then query threads?\nIdeally the processing would be n-threads for recieving, which hand off to m-threads for\n request handling. It would generally be the case that n <= m.",32,{"inputs":[{"name":"server"}],"output":{"name":"result"}}],[11,"ready","","",32,{"inputs":[{"name":"server"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"interrupted","","",32,{"inputs":[{"name":"server"},{"name":"eventloop"}],"output":null}],[0,"error","trust_dns","",null,null],[4,"DecodeError","trust_dns::error","",null,null],[13,"ParseUtf8Error","","",33,null],[13,"UnknownDnsClassValue","","",33,null],[13,"UnknownDnsClassStr","","",33,null],[13,"UnknownRecordTypeValue","","",33,null],[13,"UnknownRecordTypeStr","","",33,null],[13,"UnknownAlgorithmTypeValue","","",33,null],[13,"NoRecordDataType","","",33,null],[13,"NoRecordDataLength","","",33,null],[13,"EOF","","",33,null],[13,"Sig0NotLast","","",33,null],[13,"EdnsNameNotRoot","","",33,null],[13,"DnsKeyProtocolNot3","","",33,null],[13,"UnrecognizedNsec3Flags","","",33,null],[13,"UnrecognizedLabelCode","","",33,null],[13,"IncorrectRDataLengthRead","","",33,null],[13,"BadPublicKey","","",33,null],[13,"SslError","","",33,null],[4,"EncodeError","","",null,null],[13,"CharacterDataTooLong","","",34,null],[13,"LabelBytesTooLong","","",34,null],[13,"DomainNameTooLong","","",34,null],[4,"ClientError","","",null,null],[13,"DecodeError","","",35,null],[13,"EncodeError","","",35,null],[13,"IoError","","",35,null],[13,"NotAllBytesSent","","",35,null],[12,"sent","trust_dns::error::ClientError","",35,null],[12,"expect","","",35,null],[13,"NotAllBytesReceived","trust_dns::error","",35,null],[12,"received","trust_dns::error::ClientError","",35,null],[12,"expect","","",35,null],[13,"IncorrectMessageId","trust_dns::error","",35,null],[12,"got","trust_dns::error::ClientError","",35,null],[12,"expect","","",35,null],[13,"TimedOut","trust_dns::error","",35,null],[13,"NoAddress","","",35,null],[13,"NoNameServer","","",35,null],[13,"TimerError","","",35,null],[13,"NoDataReceived","","",35,null],[13,"ErrorResponse","","",35,null],[13,"NoRRSIG","","",35,null],[13,"NoDNSKEY","","",35,null],[13,"NoDS","","",35,null],[13,"NoSOARecord","","",35,null],[13,"SecNxDomain","","",35,null],[12,"proof","trust_dns::error::ClientError","",35,null],[13,"InvalidNsec","trust_dns::error","",35,null],[13,"InvalidNsec3","","",35,null],[13,"NoNsec","","",35,null],[4,"LexerError","","",null,null],[13,"ParseUtf8Error","","",36,null],[13,"EscapedCharOutsideCharData","","",36,null],[13,"IllegalCharacter","","",36,null],[13,"UnrecognizedChar","","",36,null],[13,"BadEscapedData","","",36,null],[13,"UnrecognizedOctet","","",36,null],[13,"ParseIntError","","",36,null],[13,"UnclosedQuotedString","","",36,null],[13,"UnclosedList","","",36,null],[13,"UnrecognizedDollar","","",36,null],[13,"EOF","","",36,null],[13,"IllegalState","","",36,null],[4,"ParseError","","",null,null],[13,"LexerError","","",37,null],[13,"DecodeError","","",37,null],[13,"UnexpectedToken","","",37,null],[13,"OriginIsUndefined","","",37,null],[13,"RecordTypeNotSpecified","","",37,null],[13,"RecordNameNotSpecified","","",37,null],[13,"RecordClassNotSpecified","","",37,null],[13,"RecordTTLNotSpecified","","",37,null],[13,"RecordDataNotSpecified","","",37,null],[13,"SoaAlreadySpecified","","",37,null],[13,"MissingToken","","",37,null],[13,"IoError","","",37,null],[13,"ParseIntError","","",37,null],[13,"AddrParseError","","",37,null],[13,"CharToIntError","","",37,null],[13,"ParseTimeError","","",37,null],[4,"ConfigError","","",null,null],[13,"IoError","","",38,null],[13,"ParserError","","",38,null],[13,"VecParserError","","",38,null],[13,"DecodeError","","",38,null],[11,"fmt","","",33,{"inputs":[{"name":"decodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"decodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",33,{"inputs":[{"name":"decodeerror"}],"output":{"name":"str"}}],[11,"cause","","",33,{"inputs":[{"name":"decodeerror"}],"output":{"name":"option"}}],[11,"from","","",33,{"inputs":[{"name":"decodeerror"},{"name":"fromutf8error"}],"output":{"name":"decodeerror"}}],[11,"from","","",33,{"inputs":[{"name":"decodeerror"},{"name":"sslerror"}],"output":{"name":"decodeerror"}}],[11,"fmt","","",34,{"inputs":[{"name":"encodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"encodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",34,{"inputs":[{"name":"encodeerror"}],"output":{"name":"str"}}],[11,"cause","","",34,{"inputs":[{"name":"encodeerror"}],"output":{"name":"option"}}],[11,"fmt","","",35,{"inputs":[{"name":"clienterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"clienterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",35,{"inputs":[{"name":"clienterror"}],"output":{"name":"str"}}],[11,"cause","","",35,{"inputs":[{"name":"clienterror"}],"output":{"name":"option"}}],[11,"from","","",35,{"inputs":[{"name":"clienterror"},{"name":"decodeerror"}],"output":{"name":"self"}}],[11,"from","","",35,{"inputs":[{"name":"clienterror"},{"name":"encodeerror"}],"output":{"name":"self"}}],[11,"from","","",35,{"inputs":[{"name":"clienterror"},{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"lexererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"lexererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",36,{"inputs":[{"name":"lexererror"}],"output":{"name":"str"}}],[11,"cause","","",36,{"inputs":[{"name":"lexererror"}],"output":{"name":"option"}}],[11,"from","","",36,{"inputs":[{"name":"lexererror"},{"name":"fromutf8error"}],"output":{"name":"lexererror"}}],[11,"from","","",36,{"inputs":[{"name":"lexererror"},{"name":"parseinterror"}],"output":{"name":"lexererror"}}],[11,"fmt","","",37,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",37,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"cause","","",37,{"inputs":[{"name":"parseerror"}],"output":{"name":"option"}}],[11,"from","","",37,{"inputs":[{"name":"parseerror"},{"name":"lexererror"}],"output":{"name":"parseerror"}}],[11,"from","","",37,{"inputs":[{"name":"parseerror"},{"name":"decodeerror"}],"output":{"name":"parseerror"}}],[11,"from","","",37,{"inputs":[{"name":"parseerror"},{"name":"error"}],"output":{"name":"parseerror"}}],[11,"from","","",37,{"inputs":[{"name":"parseerror"},{"name":"parseinterror"}],"output":{"name":"parseerror"}}],[11,"from","","",37,{"inputs":[{"name":"parseerror"},{"name":"addrparseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",38,{"inputs":[{"name":"configerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"configerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",38,{"inputs":[{"name":"configerror"}],"output":{"name":"str"}}],[11,"cause","","",38,{"inputs":[{"name":"configerror"}],"output":{"name":"option"}}],[11,"from","","",38,{"inputs":[{"name":"configerror"},{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",38,{"inputs":[{"name":"configerror"},{"name":"parsererror"}],"output":{"name":"self"}}],[11,"from","","",38,{"inputs":[{"name":"configerror"},{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",38,{"inputs":[{"name":"configerror"},{"name":"decodeerror"}],"output":{"name":"self"}}],[6,"DecodeResult","","",null,null],[6,"EncodeResult","","",null,null],[6,"ClientResult","","",null,null],[6,"LexerResult","","",null,null],[6,"ParseResult","","",null,null],[6,"ConfigResult","","",null,null],[0,"serialize","trust_dns","",null,null],[0,"binary","trust_dns::serialize","",null,null],[3,"BinDecoder","trust_dns::serialize::binary","This is non-destructive to the inner buffer, b/c for pointer types we need to perform a reverse\n seek to lookup names",null,null],[3,"BinEncoder","","Encode DNS messages and resource record types.",null,null],[4,"EncodeMode","","In the Verify mode there maybe some things which are encoded differently, e.g. SIG0 records\nshould not be included in the additional count and not in the encoded data when in Verify",null,null],[13,"Verify","","",39,null],[13,"Normal","","",39,null],[11,"new","","",40,null],[11,"pop","","",40,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"len","","",40,{"inputs":[{"name":"bindecoder"}],"output":{"name":"usize"}}],[11,"peek","","",40,{"inputs":[{"name":"bindecoder"}],"output":{"name":"option"}}],[11,"index","","",40,{"inputs":[{"name":"bindecoder"}],"output":{"name":"usize"}}],[11,"clone","","This is a pretty efficient clone, as the buffer is never cloned, and only the index is set\nto the value passed in",40,{"inputs":[{"name":"bindecoder"},{"name":"u16"}],"output":{"name":"bindecoder"}}],[11,"read_character_data","","<character-string> is a single\nlength octet followed by that number of characters.  <character-string>\nis treated as binary information, and can be up to 256 characters in\nlength (including the length octet).",40,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"read_vec","","",40,{"inputs":[{"name":"bindecoder"},{"name":"usize"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",40,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","parses the next 2 bytes into u16. This performs a byte-by-byte manipulation, there\n which means endianness is implicitly handled (i.e. no network to little endian (intel), issues)",40,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","parses the next four bytes into i32. This performs a byte-by-byte manipulation, there\n which means endianness is implicitly handled (i.e. no network to little endian (intel), issues)",40,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","parses the next four bytes into u32. This performs a byte-by-byte manipulation, there\n which means endianness is implicitly handled (i.e. no network to little endian (intel), issues)",40,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"new","","",41,{"inputs":[{"name":"binencoder"},{"name":"vec"}],"output":{"name":"self"}}],[11,"with_mode","","",41,{"inputs":[{"name":"binencoder"},{"name":"vec"},{"name":"encodemode"}],"output":{"name":"self"}}],[11,"with_offset","","offset is used mainly for pointers. If this encoder is starting at some point further in\nthe sequence of bytes, for the proper offset of the pointer, the offset accounts for that\nby using the offset to add to the pointer location being written.",41,{"inputs":[{"name":"binencoder"},{"name":"vec"},{"name":"u32"},{"name":"encodemode"}],"output":{"name":"self"}}],[11,"as_bytes","","",41,{"inputs":[{"name":"binencoder"}],"output":{"name":"vec"}}],[11,"len","","",41,{"inputs":[{"name":"binencoder"}],"output":{"name":"usize"}}],[11,"offset","","",41,{"inputs":[{"name":"binencoder"}],"output":{"name":"u32"}}],[11,"mode","","",41,{"inputs":[{"name":"binencoder"}],"output":{"name":"encodemode"}}],[11,"set_canonical_names","","",41,{"inputs":[{"name":"binencoder"},{"name":"bool"}],"output":null}],[11,"is_canonical_names","","",41,{"inputs":[{"name":"binencoder"}],"output":{"name":"bool"}}],[11,"reserve","","",41,{"inputs":[{"name":"binencoder"},{"name":"usize"}],"output":null}],[11,"emit","","",41,{"inputs":[{"name":"binencoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"store_label_pointer","","store the label pointer, the location is the current position in the buffer\nimplicitly, it is expected that the name will be written to the stream after this.",41,{"inputs":[{"name":"binencoder"},{"name":"vec"}],"output":null}],[11,"get_label_pointer","","",41,null],[11,"emit_character_data","","matches description from above.",41,{"inputs":[{"name":"binencoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",41,{"inputs":[{"name":"binencoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",41,{"inputs":[{"name":"binencoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",41,{"inputs":[{"name":"binencoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_vec","","",41,null],[11,"eq","","",39,{"inputs":[{"name":"encodemode"},{"name":"encodemode"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"encodemode"},{"name":"encodemode"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"encodemode"}],"output":{"name":"encodemode"}}],[8,"BinSerializable","","",null,null],[10,"read","","",42,{"inputs":[{"name":"binserializable"},{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[10,"emit","","",42,{"inputs":[{"name":"binserializable"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"read","collections::vec","",11,{"inputs":[{"name":"vec"},{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",11,{"inputs":[{"name":"vec"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[0,"txt","trust_dns::serialize","",null,null],[3,"Parser","trust_dns::serialize::txt","",null,null],[3,"Lexer","","",null,null],[4,"Token","","",null,null],[13,"Blank","","",43,null],[13,"List","","",43,null],[13,"CharData","","",43,null],[13,"At","","",43,null],[13,"Include","","",43,null],[13,"Origin","","",43,null],[13,"Ttl","","",43,null],[13,"EOL","","",43,null],[11,"new","","",44,{"inputs":[{"name":"lexer"},{"name":"str"}],"output":{"name":"lexer"}}],[11,"next_token","","",44,{"inputs":[{"name":"lexer"}],"output":{"name":"lexerresult"}}],[11,"clone","","",43,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"fmt","","",43,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"new","","",45,{"inputs":[{"name":"parser"}],"output":{"name":"self"}}],[11,"parse_file","","",45,{"inputs":[{"name":"parser"},{"name":"file"},{"name":"option"},{"name":"zonetype"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"parse","","",45,{"inputs":[{"name":"parser"},{"name":"lexer"},{"name":"option"},{"name":"zonetype"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"parse_time","","parses the string following the rules from:\n https://tools.ietf.org/html/rfc2308 (NXCaching RFC) and\n http://www.zytrax.com/books/dns/apa/time.html",45,{"inputs":[{"name":"parser"},{"name":"str"}],"output":{"name":"parseresult"}}],[0,"config","trust_dns","",null,null],[3,"Config","trust_dns::config","",null,null],[3,"ZoneConfig","","",null,null],[11,"fmt","","",46,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",46,{"inputs":[{"name":"config"},{"name":"__d"}],"output":{"name":"result"}}],[11,"read_config","","read a Config file from the file specified at path.",46,{"inputs":[{"name":"config"},{"name":"path"}],"output":{"name":"configresult"}}],[11,"get_listen_addrs_ipv4","","",46,{"inputs":[{"name":"config"}],"output":{"name":"vec"}}],[11,"get_listen_addrs_ipv6","","",46,{"inputs":[{"name":"config"}],"output":{"name":"vec"}}],[11,"get_listen_port","","",46,{"inputs":[{"name":"config"}],"output":{"name":"u16"}}],[11,"get_log_level","","",46,{"inputs":[{"name":"config"}],"output":{"name":"loglevel"}}],[11,"get_directory","","",46,{"inputs":[{"name":"config"}],"output":{"name":"path"}}],[11,"get_zones","","",46,null],[11,"from_str","","",46,{"inputs":[{"name":"config"},{"name":"str"}],"output":{"name":"configresult"}}],[11,"fmt","","",47,{"inputs":[{"name":"zoneconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"zoneconfig"},{"name":"zoneconfig"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"zoneconfig"},{"name":"zoneconfig"}],"output":{"name":"bool"}}],[11,"decode","","",47,{"inputs":[{"name":"zoneconfig"},{"name":"__d"}],"output":{"name":"result"}}],[11,"get_zone","","",47,{"inputs":[{"name":"zoneconfig"}],"output":{"name":"parseresult"}}],[11,"get_zone_type","","",47,{"inputs":[{"name":"zoneconfig"}],"output":{"name":"zonetype"}}],[11,"get_file","","",47,{"inputs":[{"name":"zoneconfig"}],"output":{"name":"pathbuf"}}],[11,"get_allow_udpate","","",47,{"inputs":[{"name":"zoneconfig"}],"output":{"name":"bool"}}]],"paths":[[3,"TrustDnsLogger"],[4,"RecordType"],[4,"DNSClass"],[3,"Record"],[4,"RData"],[3,"Name"],[4,"Algorithm"],[4,"DigestType"],[4,"Nsec3HashAlgorithm"],[3,"Signer"],[3,"SupportedAlgorithms"],[3,"Vec"],[3,"TrustAnchor"],[4,"ZoneType"],[3,"Authority"],[3,"Catalog"],[4,"OpCode"],[4,"ResponseCode"],[8,"UpdateMessage"],[3,"Message"],[4,"MessageType"],[3,"Header"],[3,"Query"],[3,"Edns"],[4,"UdpState"],[3,"UdpHandler"],[3,"UdpClientConnection"],[4,"TcpState"],[3,"TcpHandler"],[3,"TcpClientConnection"],[3,"Client"],[8,"ClientConnection"],[3,"Server"],[4,"DecodeError"],[4,"EncodeError"],[4,"ClientError"],[4,"LexerError"],[4,"ParseError"],[4,"ConfigError"],[4,"EncodeMode"],[3,"BinDecoder"],[3,"BinEncoder"],[8,"BinSerializable"],[4,"Token"],[3,"Lexer"],[3,"Parser"],[3,"Config"],[3,"ZoneConfig"]]};
initSearch(searchIndex);
