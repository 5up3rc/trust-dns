var searchIndex = {};
searchIndex["named"] = {"doc":"","items":[[5,"main","named","Main method for running the named server.\nAs of this writing, this will panic on any invalid input. At this top level binary is the only\n part Trust-DNS where panics are allowed.",null,{"inputs":[],"output":null}]],"paths":[]};
searchIndex["trust_dns"] = {"doc":"Trust-DNS is intended to be a fully compliant domain name server and client library.","items":[[5,"version","trust_dns","",null,{"inputs":[],"output":{"name":"str"}}],[0,"error","","All defined errors for Trust-DNS",null,null],[3,"ErrorLoc","trust_dns::error","",null,null],[12,"file","","",0,null],[12,"line","","",0,null],[12,"col","","",0,null],[4,"DecodeError","","",null,null],[13,"ParseUtf8Error","","",1,null],[13,"UnknownDnsClassValue","","",1,null],[13,"UnknownDnsClassStr","","",1,null],[13,"UnknownRecordTypeValue","","",1,null],[13,"UnknownRecordTypeStr","","",1,null],[13,"UnknownAlgorithmTypeValue","","",1,null],[13,"NoRecordDataType","","",1,null],[13,"NoRecordDataLength","","",1,null],[13,"EOF","","",1,null],[13,"Sig0NotLast","","",1,null],[13,"EdnsNameNotRoot","","",1,null],[13,"DnsKeyProtocolNot3","","",1,null],[13,"UnrecognizedNsec3Flags","","",1,null],[13,"UnrecognizedLabelCode","","",1,null],[13,"IncorrectRDataLengthRead","","",1,null],[13,"BadPublicKey","","",1,null],[13,"SslError","","",1,null],[13,"MoreThanOneEdns","","",1,null],[4,"EncodeError","","",null,null],[13,"CharacterDataTooLong","","",2,null],[13,"LabelBytesTooLong","","",2,null],[13,"DomainNameTooLong","","",2,null],[4,"ClientError","","",null,null],[13,"DecodeError","","",3,null],[13,"EncodeError","","",3,null],[13,"IoError","","",3,null],[13,"NotAllBytesSent","","",3,null],[12,"loc","trust_dns::error::ClientError","",3,null],[12,"sent","","",3,null],[12,"expect","","",3,null],[13,"NotAllBytesReceived","trust_dns::error","",3,null],[12,"loc","trust_dns::error::ClientError","",3,null],[12,"received","","",3,null],[12,"expect","","",3,null],[13,"IncorrectMessageId","trust_dns::error","",3,null],[12,"loc","trust_dns::error::ClientError","",3,null],[12,"got","","",3,null],[12,"expect","","",3,null],[13,"TimedOut","trust_dns::error","",3,null],[13,"NoAddress","","",3,null],[13,"NoNameServer","","",3,null],[13,"TimerError","","",3,null],[13,"NoDataReceived","","",3,null],[13,"ErrorResponse","","",3,null],[13,"NoRRSIG","","",3,null],[13,"NoDNSKEY","","",3,null],[13,"NoDS","","",3,null],[13,"NoSOARecord","","",3,null],[13,"SecNxDomain","","",3,null],[12,"loc","trust_dns::error::ClientError","",3,null],[12,"proof","","",3,null],[13,"InvalidNsec","trust_dns::error","",3,null],[13,"InvalidNsec3","","",3,null],[13,"NoNsec","","",3,null],[4,"LexerError","","",null,null],[13,"ParseUtf8Error","","",4,null],[13,"EscapedCharOutsideCharData","","",4,null],[13,"IllegalCharacter","","",4,null],[13,"UnrecognizedChar","","",4,null],[13,"BadEscapedData","","",4,null],[13,"UnrecognizedOctet","","",4,null],[13,"ParseIntError","","",4,null],[13,"UnclosedQuotedString","","",4,null],[13,"UnclosedList","","",4,null],[13,"UnrecognizedDollar","","",4,null],[13,"EOF","","",4,null],[13,"IllegalState","","",4,null],[4,"ParseError","","",null,null],[13,"LexerError","","",5,null],[13,"DecodeError","","",5,null],[13,"UnexpectedToken","","",5,null],[13,"OriginIsUndefined","","",5,null],[13,"RecordTypeNotSpecified","","",5,null],[13,"RecordNameNotSpecified","","",5,null],[13,"RecordClassNotSpecified","","",5,null],[13,"RecordTTLNotSpecified","","",5,null],[13,"RecordDataNotSpecified","","",5,null],[13,"SoaAlreadySpecified","","",5,null],[13,"MissingToken","","",5,null],[13,"IoError","","",5,null],[13,"ParseIntError","","",5,null],[13,"AddrParseError","","",5,null],[13,"CharToIntError","","",5,null],[13,"ParseTimeError","","",5,null],[4,"ConfigError","","",null,null],[13,"IoError","","",6,null],[13,"ParserError","","",6,null],[13,"VecParserError","","",6,null],[13,"DecodeError","","",6,null],[11,"fmt","","",0,{"inputs":[{"name":"errorloc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"errorloc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"decodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"decodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"decodeerror"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"decodeerror"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"decodeerror"}}],[11,"from","","",1,{"inputs":[{"name":"sslerror"}],"output":{"name":"decodeerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"encodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"encodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"encodeerror"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"encodeerror"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"clienterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"clienterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"clienterror"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"clienterror"}],"output":{"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"lexererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"lexererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"lexererror"}],"output":{"name":"str"}}],[11,"cause","","",4,{"inputs":[{"name":"lexererror"}],"output":{"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"lexererror"}}],[11,"from","","",4,{"inputs":[{"name":"parseinterror"}],"output":{"name":"lexererror"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"parseerror"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"lexererror"}],"output":{"name":"parseerror"}}],[11,"from","","",5,{"inputs":[{"name":"decodeerror"}],"output":{"name":"parseerror"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"parseerror"}}],[11,"from","","",5,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseerror"}}],[11,"from","","",5,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"configerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"configerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"configerror"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"configerror"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"parsererror"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"decodeerror"}],"output":{"name":"self"}}],[6,"DecodeResult","","",null,null],[6,"EncodeResult","","",null,null],[6,"ClientResult","","",null,null],[6,"LexerResult","","",null,null],[6,"ParseResult","","",null,null],[6,"ConfigResult","","",null,null],[0,"logger","trust_dns","",null,null],[3,"TrustDnsLogger","trust_dns::logger","",null,null],[11,"new","","",7,{"inputs":[{"name":"loglevel"}],"output":{"name":"trustdnslogger"}}],[11,"init","","",7,{"inputs":[{"name":"trustdnslogger"}],"output":{"name":"result"}}],[11,"enable_logging","","",7,{"inputs":[{"name":"loglevel"}],"output":null}],[11,"enabled","","",7,{"inputs":[{"name":"trustdnslogger"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[11,"log","","",7,{"inputs":[{"name":"trustdnslogger"},{"name":"logrecord"}],"output":null}],[0,"rr","trust_dns","Resource record related components, e.g. `Name` aka label, `Record`, `RData`, ...",null,null],[0,"record_type","trust_dns::rr","record type definitions",null,null],[4,"RecordType","trust_dns::rr::record_type","",null,null],[13,"A","","",8,null],[13,"AAAA","","",8,null],[13,"ANY","","",8,null],[13,"AXFR","","",8,null],[13,"CNAME","","",8,null],[13,"DNSKEY","","",8,null],[13,"DS","","",8,null],[13,"IXFR","","",8,null],[13,"KEY","","",8,null],[13,"MX","","",8,null],[13,"NS","","",8,null],[13,"NULL","","",8,null],[13,"NSEC","","",8,null],[13,"NSEC3","","",8,null],[13,"NSEC3PARAM","","",8,null],[13,"OPT","","",8,null],[13,"PTR","","",8,null],[13,"RRSIG","","",8,null],[13,"SIG","","",8,null],[13,"SOA","","",8,null],[13,"SRV","","",8,null],[13,"TXT","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"recordtype"}],"output":{"name":"recordtype"}}],[11,"hash","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"recordtype"},{"name":"recordtype"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"recordtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Convert from RecordType to &amp;str",8,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[11,"from_u16","","Convert from RecordType to &amp;str",8,{"inputs":[{"name":"u16"}],"output":{"name":"decoderesult"}}],[11,"read","","",8,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",8,{"inputs":[{"name":"recordtype"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"recordtype"},{"name":"recordtype"}],"output":{"name":"option"}}],[11,"cmp","","",8,{"inputs":[{"name":"recordtype"},{"name":"self"}],"output":{"name":"ordering"}}],[0,"dns_class","trust_dns::rr","class of DNS operations, in general always IN for internet",null,null],[4,"DNSClass","trust_dns::rr::dns_class","",null,null],[13,"IN","","",9,null],[13,"CH","","",9,null],[13,"HS","","",9,null],[13,"NONE","","",9,null],[13,"ANY","","",9,null],[13,"OPT","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"dnsclass"}],"output":{"name":"dnsclass"}}],[11,"hash","","",9,null],[11,"eq","","",9,{"inputs":[{"name":"dnsclass"},{"name":"dnsclass"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"dnsclass"},{"name":"dnsclass"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"dnsclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Convert from &amp;str to DNSClass",9,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[11,"from_u16","","Convert from u16 to DNSClass",9,{"inputs":[{"name":"u16"}],"output":{"name":"decoderesult"}}],[11,"for_opt","","",9,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"read","","",9,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",9,{"inputs":[{"name":"dnsclass"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"dnsclass"},{"name":"dnsclass"}],"output":{"name":"option"}}],[11,"cmp","","",9,{"inputs":[{"name":"dnsclass"},{"name":"self"}],"output":{"name":"ordering"}}],[0,"resource","trust_dns::rr","resource record implementation",null,null],[3,"Record","trust_dns::rr::resource","",null,null],[11,"clone","","",10,{"inputs":[{"name":"record"}],"output":{"name":"record"}}],[11,"fmt","","",10,{"inputs":[{"name":"record"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",10,{"inputs":[{"name":"record"},{"name":"record"}],"output":{"name":"ordering"}}],[11,"new","","Creates a default record, use the setters to build a more useful object.",10,{"inputs":[],"output":{"name":"record"}}],[11,"with","","Create a record with the specified initial values.",10,{"inputs":[{"name":"name"},{"name":"recordtype"},{"name":"u32"}],"output":{"name":"record"}}],[11,"name","","",10,{"inputs":[{"name":"record"},{"name":"name"}],"output":{"name":"self"}}],[11,"add_name","","",10,{"inputs":[{"name":"record"},{"name":"string"}],"output":{"name":"self"}}],[11,"rr_type","","",10,{"inputs":[{"name":"record"},{"name":"recordtype"}],"output":{"name":"self"}}],[11,"dns_class","","",10,{"inputs":[{"name":"record"},{"name":"dnsclass"}],"output":{"name":"self"}}],[11,"ttl","","",10,{"inputs":[{"name":"record"},{"name":"u32"}],"output":{"name":"self"}}],[11,"rdata","","",10,{"inputs":[{"name":"record"},{"name":"rdata"}],"output":{"name":"self"}}],[11,"get_name","","",10,{"inputs":[{"name":"record"}],"output":{"name":"name"}}],[11,"get_rr_type","","",10,{"inputs":[{"name":"record"}],"output":{"name":"recordtype"}}],[11,"get_dns_class","","",10,{"inputs":[{"name":"record"}],"output":{"name":"dnsclass"}}],[11,"get_ttl","","",10,{"inputs":[{"name":"record"}],"output":{"name":"u32"}}],[11,"get_rdata","","",10,{"inputs":[{"name":"record"}],"output":{"name":"rdata"}}],[11,"get_rdata_mut","","",10,{"inputs":[{"name":"record"}],"output":{"name":"rdata"}}],[11,"read","","parse a resource record line example:\nWARNING: the record_bytes is 100% consumed and destroyed in this parsing process",10,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",10,{"inputs":[{"name":"record"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"eq","","",10,{"inputs":[{"name":"record"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"record"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"record"},{"name":"record"}],"output":{"name":"option"}}],[0,"record_data","trust_dns::rr","record data enum variants",null,null],[4,"RData","trust_dns::rr::record_data","Record data enum variants",null,null],[13,"A","","",11,null],[13,"AAAA","","",11,null],[13,"CNAME","","",11,null],[13,"DNSKEY","","",11,null],[13,"DS","","",11,null],[13,"KEY","","",11,null],[13,"MX","","",11,null],[13,"NULL","","",11,null],[13,"NS","","",11,null],[13,"NSEC","","",11,null],[13,"NSEC3","","",11,null],[13,"NSEC3PARAM","","",11,null],[13,"OPT","","",11,null],[13,"PTR","","",11,null],[13,"SIG","","",11,null],[13,"SOA","","",11,null],[13,"SRV","","",11,null],[13,"TXT","","",11,null],[11,"clone","","",11,{"inputs":[{"name":"rdata"}],"output":{"name":"rdata"}}],[11,"eq","","",11,{"inputs":[{"name":"rdata"},{"name":"rdata"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"rdata"},{"name":"rdata"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"rdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"parse","","",11,{"inputs":[{"name":"recordtype"},{"name":"vec"},{"name":"option"}],"output":{"name":"parseresult"}}],[11,"read","","",11,{"inputs":[{"name":"bindecoder"},{"name":"recordtype"},{"name":"u16"}],"output":{"name":"decoderesult"}}],[11,"emit","","",11,{"inputs":[{"name":"rdata"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"rdata"},{"name":"rdata"}],"output":{"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"rdata"},{"name":"self"}],"output":{"name":"ordering"}}],[0,"domain","trust_dns::rr","domain name, aka labels, implementaton",null,null],[3,"Name","trust_dns::rr::domain","TODO: all Names should be stored in a global &quot;intern&quot; space, and then everything that uses\n them should be through references. As a workaround the Strings are all Rc as well as the array\nTODO: Currently this probably doesn&#39;t support binary names, it would be nice to do that.",null,null],[11,"hash","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"name"}],"output":{"name":"name"}}],[11,"eq","","",12,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"root","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"is_root","","",12,{"inputs":[{"name":"name"}],"output":{"name":"bool"}}],[11,"label","","inline builder",12,{"inputs":[{"name":"name"},{"name":"str"}],"output":{"name":"self"}}],[11,"with_labels","","for mutating over time",12,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"prepend_label","","prepend the String to the label",12,{"inputs":[{"name":"name"},{"name":"rc"}],"output":{"name":"self"}}],[11,"add_label","","appends the String to this label at the end",12,{"inputs":[{"name":"name"},{"name":"rc"}],"output":{"name":"self"}}],[11,"append","","appends the other to this name",12,{"inputs":[{"name":"name"},{"name":"self"}],"output":{"name":"self"}}],[11,"base_name","","Trims off the first part of the name, to help with searching for the domain piece",12,{"inputs":[{"name":"name"}],"output":{"name":"name"}}],[11,"zone_of","","returns true if the name components of self are all present at the end of name",12,{"inputs":[{"name":"name"},{"name":"self"}],"output":{"name":"bool"}}],[11,"num_labels","","",12,{"inputs":[{"name":"name"}],"output":{"name":"u8"}}],[11,"len","","returns the length in bytes of the labels. &#39;.&#39; counts as 1",12,{"inputs":[{"name":"name"}],"output":{"name":"usize"}}],[11,"parse","","",12,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"parseresult"}}],[11,"emit_as_canonical","","",12,{"inputs":[{"name":"name"},{"name":"binencoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"read","","parses the chain of labels\n this has a max of 255 octets, with each label being less than 63.\n all names will be stored lowercase internally.\nThis will consume the portions of the Vec which it is reading...",12,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",12,{"inputs":[{"name":"name"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"fmt","","",12,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",12,{"inputs":[{"name":"name"},{"name":"usize"}],"output":{"name":"string"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"option"}}],[11,"cmp","","RFC 4034                DNSSEC Resource Records               March 2005",12,{"inputs":[{"name":"name"},{"name":"self"}],"output":{"name":"ordering"}}],[0,"rdata","trust_dns::rr","All record data structures and related serialization methods",null,null],[0,"a","trust_dns::rr::rdata","IPv4 address record data",null,null],[5,"read","trust_dns::rr::rdata::a","",null,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[5,"emit","","",null,{"inputs":[{"name":"binencoder"},{"name":"ipv4addr"}],"output":{"name":"encoderesult"}}],[5,"parse","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"parseresult"}}],[0,"aaaa","trust_dns::rr::rdata","IPv6 address record data",null,null],[5,"read","trust_dns::rr::rdata::aaaa","",null,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[5,"emit","","",null,{"inputs":[{"name":"binencoder"},{"name":"ipv6addr"}],"output":{"name":"encoderesult"}}],[5,"parse","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"parseresult"}}],[0,"ds","trust_dns::rr::rdata","pointer record from parent zone to child zone for dnskey proof",null,null],[3,"DS","trust_dns::rr::rdata::ds","[RFC 4034, DNSSEC Resource Records, March 2005](https://tools.ietf.org/html/rfc4034#section-5)",null,null],[5,"read","","",null,{"inputs":[{"name":"bindecoder"},{"name":"u16"}],"output":{"name":"decoderesult"}}],[5,"emit","","",null,{"inputs":[{"name":"binencoder"},{"name":"ds"}],"output":{"name":"encoderesult"}}],[11,"clone","","",13,{"inputs":[{"name":"ds"}],"output":{"name":"ds"}}],[11,"hash","","",13,null],[11,"eq","","",13,{"inputs":[{"name":"ds"},{"name":"ds"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"ds"},{"name":"ds"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"ds"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,{"inputs":[{"name":"u16"},{"name":"algorithm"},{"name":"digesttype"},{"name":"vec"}],"output":{"name":"ds"}}],[11,"get_key_tag","","[RFC 4034, DNSSEC Resource Records, March 2005](https://tools.ietf.org/html/rfc4034#section-5.1.1)",13,{"inputs":[{"name":"ds"}],"output":{"name":"u16"}}],[11,"get_algorithm","","[RFC 4034, DNSSEC Resource Records, March 2005](https://tools.ietf.org/html/rfc4034#section-5.1.1)",13,{"inputs":[{"name":"ds"}],"output":{"name":"algorithm"}}],[11,"get_digest_type","","[RFC 4034, DNSSEC Resource Records, March 2005](https://tools.ietf.org/html/rfc4034#section-5.1.1)",13,{"inputs":[{"name":"ds"}],"output":{"name":"digesttype"}}],[11,"get_digest","","[RFC 4034, DNSSEC Resource Records, March 2005](https://tools.ietf.org/html/rfc4034#section-5.1.1)",13,null],[0,"dnskey","trust_dns::rr::rdata","public key record data for signing zone records",null,null],[3,"DNSKEY","trust_dns::rr::rdata::dnskey","[RFC 4034, DNSSEC Resource Records, March 2005](https://tools.ietf.org/html/rfc4034#section-2)",null,null],[5,"read","","",null,{"inputs":[{"name":"bindecoder"},{"name":"u16"}],"output":{"name":"decoderesult"}}],[5,"emit","","",null,{"inputs":[{"name":"binencoder"},{"name":"dnskey"}],"output":{"name":"encoderesult"}}],[11,"clone","","",14,{"inputs":[{"name":"dnskey"}],"output":{"name":"dnskey"}}],[11,"hash","","",14,null],[11,"eq","","",14,{"inputs":[{"name":"dnskey"},{"name":"dnskey"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"dnskey"},{"name":"dnskey"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"dnskey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",14,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"algorithm"},{"name":"vec"}],"output":{"name":"dnskey"}}],[11,"is_zone_key","","[RFC 4034, DNSSEC Resource Records, March 2005](https://tools.ietf.org/html/rfc4034#section-2.1.1)",14,{"inputs":[{"name":"dnskey"}],"output":{"name":"bool"}}],[11,"is_secure_entry_point","","[RFC 4034, DNSSEC Resource Records, March 2005](https://tools.ietf.org/html/rfc4034#section-2.1.1)",14,{"inputs":[{"name":"dnskey"}],"output":{"name":"bool"}}],[11,"is_revoke","","[RFC 5011, Trust Anchor Update, September 2007](https://tools.ietf.org/html/rfc5011#section-3)",14,{"inputs":[{"name":"dnskey"}],"output":{"name":"bool"}}],[11,"get_algorithm","","[RFC 4034, DNSSEC Resource Records, March 2005](https://tools.ietf.org/html/rfc4034#section-2.1.3)",14,{"inputs":[{"name":"dnskey"}],"output":{"name":"algorithm"}}],[11,"get_public_key","","[RFC 4034, DNSSEC Resource Records, March 2005](https://tools.ietf.org/html/rfc4034#section-2.1.4)",14,null],[0,"mx","trust_dns::rr::rdata","mail exchange, email, record",null,null],[3,"MX","trust_dns::rr::rdata::mx","[RFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, November 1987](https://tools.ietf.org/html/rfc1035)",null,null],[5,"read","","",null,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[5,"emit","","",null,{"inputs":[{"name":"binencoder"},{"name":"mx"}],"output":{"name":"encoderesult"}}],[5,"parse","","",null,{"inputs":[{"name":"vec"},{"name":"option"}],"output":{"name":"parseresult"}}],[11,"clone","","",15,{"inputs":[{"name":"mx"}],"output":{"name":"mx"}}],[11,"hash","","",15,null],[11,"eq","","",15,{"inputs":[{"name":"mx"},{"name":"mx"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"mx"},{"name":"mx"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"mx"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",15,{"inputs":[{"name":"u16"},{"name":"name"}],"output":{"name":"mx"}}],[11,"get_preference","","[RFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, November 1987](https://tools.ietf.org/html/rfc1035)",15,{"inputs":[{"name":"mx"}],"output":{"name":"u16"}}],[11,"get_exchange","","[RFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, November 1987](https://tools.ietf.org/html/rfc1035)",15,{"inputs":[{"name":"mx"}],"output":{"name":"name"}}],[0,"name","trust_dns::rr::rdata","Record type for all cname like records.",null,null],[5,"read","trust_dns::rr::rdata::name","",null,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[5,"emit","","",null,{"inputs":[{"name":"binencoder"},{"name":"name"}],"output":{"name":"encoderesult"}}],[5,"parse","","",null,{"inputs":[{"name":"vec"},{"name":"option"}],"output":{"name":"parseresult"}}],[0,"null","trust_dns::rr::rdata","null record type, generally not used except as an internal tool for representing null data",null,null],[3,"NULL","trust_dns::rr::rdata::null","[RFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, November 1987](https://tools.ietf.org/html/rfc1035)",null,null],[5,"read","","",null,{"inputs":[{"name":"bindecoder"},{"name":"u16"}],"output":{"name":"decoderesult"}}],[5,"emit","","",null,{"inputs":[{"name":"binencoder"},{"name":"null"}],"output":{"name":"encoderesult"}}],[5,"parse","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"parseresult"}}],[11,"clone","","",16,{"inputs":[{"name":"null"}],"output":{"name":"null"}}],[11,"hash","","",16,null],[11,"eq","","",16,{"inputs":[{"name":"null"},{"name":"null"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"null"},{"name":"null"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"null"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"null"}}],[11,"with","","",16,{"inputs":[{"name":"vec"}],"output":{"name":"null"}}],[11,"get_anything","","",16,{"inputs":[{"name":"null"}],"output":{"name":"option"}}],[0,"nsec","trust_dns::rr::rdata","negative cache proof for non-existence",null,null],[3,"NSEC","trust_dns::rr::rdata::nsec","[RFC 4034, DNSSEC Resource Records, March 2005](https://tools.ietf.org/html/rfc4034#section-4)",null,null],[5,"read","","",null,{"inputs":[{"name":"bindecoder"},{"name":"u16"}],"output":{"name":"decoderesult"}}],[5,"emit","","",null,{"inputs":[{"name":"binencoder"},{"name":"nsec"}],"output":{"name":"encoderesult"}}],[11,"clone","","",17,{"inputs":[{"name":"nsec"}],"output":{"name":"nsec"}}],[11,"hash","","",17,null],[11,"eq","","",17,{"inputs":[{"name":"nsec"},{"name":"nsec"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"nsec"},{"name":"nsec"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"nsec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",17,{"inputs":[{"name":"name"},{"name":"vec"}],"output":{"name":"nsec"}}],[11,"get_next_domain_name","","[RFC 4034, DNSSEC Resource Records, March 2005](https://tools.ietf.org/html/rfc4034#section-4.1.1)",17,{"inputs":[{"name":"nsec"}],"output":{"name":"name"}}],[11,"get_type_bit_maps","","[RFC 4034, DNSSEC Resource Records, March 2005](https://tools.ietf.org/html/rfc4034#section-4.1.2)",17,null],[0,"nsec3","trust_dns::rr::rdata","hashed negative cache proof for non-existence",null,null],[3,"NSEC3","trust_dns::rr::rdata::nsec3","[RFC 5155, NSEC3, March 2008](https://tools.ietf.org/html/rfc5155#section-3)",null,null],[5,"read","","",null,{"inputs":[{"name":"bindecoder"},{"name":"u16"}],"output":{"name":"decoderesult"}}],[5,"decode_type_bit_maps","","",null,{"inputs":[{"name":"bindecoder"},{"name":"usize"}],"output":{"name":"decoderesult"}}],[5,"emit","","",null,{"inputs":[{"name":"binencoder"},{"name":"nsec3"}],"output":{"name":"encoderesult"}}],[5,"encode_bit_maps","","",null,null],[11,"clone","","",18,{"inputs":[{"name":"nsec3"}],"output":{"name":"nsec3"}}],[11,"hash","","",18,null],[11,"eq","","",18,{"inputs":[{"name":"nsec3"},{"name":"nsec3"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"nsec3"},{"name":"nsec3"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"nsec3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[{"name":"nsec3hashalgorithm"},{"name":"bool"},{"name":"u16"},{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"nsec3"}}],[11,"get_hash_algorithm","","[RFC 5155, NSEC3, March 2008](https://tools.ietf.org/html/rfc5155#section-3.1.1)",18,{"inputs":[{"name":"nsec3"}],"output":{"name":"nsec3hashalgorithm"}}],[11,"is_opt_out","","[RFC 5155, NSEC3, March 2008](https://tools.ietf.org/html/rfc5155#section-3.1.2)",18,{"inputs":[{"name":"nsec3"}],"output":{"name":"bool"}}],[11,"get_iterations","","[RFC 5155, NSEC3, March 2008](https://tools.ietf.org/html/rfc5155#section-3.1.3)",18,{"inputs":[{"name":"nsec3"}],"output":{"name":"u16"}}],[11,"get_salt","","[RFC 5155, NSEC3, March 2008](https://tools.ietf.org/html/rfc5155#section-3.1.5)",18,null],[11,"get_next_hashed_owner_name","","[RFC 5155, NSEC3, March 2008](https://tools.ietf.org/html/rfc5155#section-3.1.7)",18,null],[11,"get_type_bit_maps","","[RFC 5155, NSEC3, March 2008](https://tools.ietf.org/html/rfc5155#section-3.1.8)",18,null],[0,"nsec3param","trust_dns::rr::rdata","parameters used for the nsec3 hash method",null,null],[3,"NSEC3PARAM","trust_dns::rr::rdata::nsec3param","[RFC 5155, NSEC3, March 2008](https://tools.ietf.org/html/rfc5155#section-4)",null,null],[5,"read","","",null,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[5,"emit","","",null,{"inputs":[{"name":"binencoder"},{"name":"nsec3param"}],"output":{"name":"encoderesult"}}],[11,"clone","","",19,{"inputs":[{"name":"nsec3param"}],"output":{"name":"nsec3param"}}],[11,"hash","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"nsec3param"},{"name":"nsec3param"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"nsec3param"},{"name":"nsec3param"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"nsec3param"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",19,{"inputs":[{"name":"nsec3hashalgorithm"},{"name":"bool"},{"name":"u16"},{"name":"vec"}],"output":{"name":"nsec3param"}}],[11,"get_hash_algorithm","","[RFC 5155, NSEC3, March 2008](https://tools.ietf.org/html/rfc5155#section-4.1.1)",19,{"inputs":[{"name":"nsec3param"}],"output":{"name":"nsec3hashalgorithm"}}],[11,"is_opt_out","","[RFC 5155, NSEC3, March 2008](https://tools.ietf.org/html/rfc5155#section-4.1.2)",19,{"inputs":[{"name":"nsec3param"}],"output":{"name":"bool"}}],[11,"get_iterations","","[RFC 5155, NSEC3, March 2008](https://tools.ietf.org/html/rfc5155#section-4.1.3)",19,{"inputs":[{"name":"nsec3param"}],"output":{"name":"u16"}}],[11,"get_salt","","[RFC 5155, NSEC3, March 2008](https://tools.ietf.org/html/rfc5155#section-4.1.5)",19,null],[0,"opt","trust_dns::rr::rdata","option record for passing protocol options between the client and server",null,null],[3,"OPT","trust_dns::rr::rdata::opt","[RFC 6891, EDNS(0) Extensions, April 2013](https://tools.ietf.org/html/rfc6891#section-6)",null,null],[4,"EdnsCode","","",null,null],[13,"Zero","","[RFC 6891, Reserved](https://tools.ietf.org/html/rfc6891)",20,null],[13,"LLQ","","[LLQ On-hold](http://files.dns-sd.org/draft-sekar-dns-llq.txt)",20,null],[13,"UL","","[UL On-hold](http://files.dns-sd.org/draft-sekar-dns-ul.txt)",20,null],[13,"NSID","","[RFC 5001, NSID](https://tools.ietf.org/html/rfc5001)",20,null],[13,"DAU","","[RFC 6975, DNSSEC Algorithm Understood](https://tools.ietf.org/html/rfc6975)",20,null],[13,"DHU","","[RFC 6975, DS Hash Understood](https://tools.ietf.org/html/rfc6975)",20,null],[13,"N3U","","[RFC 6975, NSEC3 Hash Understood](https://tools.ietf.org/html/rfc6975)",20,null],[13,"Subnet","","[edns-client-subnet, Optional](https://tools.ietf.org/html/draft-vandergaast-edns-client-subnet-02)",20,null],[13,"Expire","","[RFC 7314, EDNS EXPIRE, Optional](https://tools.ietf.org/html/rfc7314)",20,null],[13,"Cookie","","[draft-ietf-dnsop-cookies](https://tools.ietf.org/html/draft-ietf-dnsop-cookies-07)",20,null],[13,"Keepalive","","[draft-ietf-dnsop-edns-tcp-keepalive, Optional](https://tools.ietf.org/html/draft-ietf-dnsop-edns-tcp-keepalive-04)",20,null],[13,"Padding","","[draft-mayrhofer-edns0-padding, Optional](https://tools.ietf.org/html/draft-mayrhofer-edns0-padding-01)",20,null],[13,"Chain","","[draft-ietf-dnsop-edns-chain-query](https://tools.ietf.org/html/draft-ietf-dnsop-edns-chain-query-07)",20,null],[13,"Unknown","","Unknown, used to deal with unknown or unsupported codes",20,null],[4,"EdnsOption","","options used to pass information about capabilities between client and server",null,null],[13,"DAU","","[RFC 6975, DNSSEC Algorithm Understood](https://tools.ietf.org/html/rfc6975)",21,null],[13,"DHU","","[RFC 6975, DS Hash Understood](https://tools.ietf.org/html/rfc6975)",21,null],[13,"N3U","","[RFC 6975, NSEC3 Hash Understood](https://tools.ietf.org/html/rfc6975)",21,null],[13,"Unknown","","Unknown, used to deal with unknown or unsupported codes",21,null],[5,"read","","",null,{"inputs":[{"name":"bindecoder"},{"name":"u16"}],"output":{"name":"decoderesult"}}],[5,"emit","","",null,{"inputs":[{"name":"binencoder"},{"name":"opt"}],"output":{"name":"encoderesult"}}],[11,"clone","","",22,{"inputs":[{"name":"opt"}],"output":{"name":"opt"}}],[11,"eq","","",22,{"inputs":[{"name":"opt"},{"name":"opt"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"opt"},{"name":"opt"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"opt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"opt"}}],[11,"new","","Creates a new OPT record data.",22,{"inputs":[{"name":"hashmap"}],"output":{"name":"opt"}}],[11,"get_options","","The entire map of options",22,{"inputs":[{"name":"opt"}],"output":{"name":"hashmap"}}],[11,"get","","Get a single option based on the code",22,{"inputs":[{"name":"opt"},{"name":"ednscode"}],"output":{"name":"option"}}],[11,"insert","","Insert a new option, the key is derived from the `EdnsOption`",22,{"inputs":[{"name":"opt"},{"name":"ednsoption"}],"output":null}],[11,"eq","","",20,{"inputs":[{"name":"ednscode"},{"name":"ednscode"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"ednscode"},{"name":"ednscode"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"ednscode"}],"output":{"name":"ednscode"}}],[11,"fmt","","",20,{"inputs":[{"name":"ednscode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"from","","",20,{"inputs":[{"name":"u16"}],"output":{"name":"ednscode"}}],[11,"hash","","",21,null],[11,"clone","","",21,{"inputs":[{"name":"ednsoption"}],"output":{"name":"ednsoption"}}],[11,"eq","","",21,{"inputs":[{"name":"ednsoption"},{"name":"ednsoption"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"ednsoption"},{"name":"ednsoption"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"ednsoption"},{"name":"ednsoption"}],"output":{"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"ednsoption"},{"name":"ednsoption"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"ednsoption"},{"name":"ednsoption"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"ednsoption"},{"name":"ednsoption"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"ednsoption"},{"name":"ednsoption"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"ednsoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",21,{"inputs":[{"name":"ednsoption"}],"output":{"name":"u16"}}],[11,"from","","",21,null],[11,"from","collections::vec","",23,{"inputs":[{"name":"ednsoption"}],"output":{"name":"vec"}}],[11,"from","trust_dns::rr::rdata::opt","",20,{"inputs":[{"name":"ednsoption"}],"output":{"name":"ednscode"}}],[0,"sig","trust_dns::rr::rdata","signature record for signing queries, updates, and responses",null,null],[3,"SIG","trust_dns::rr::rdata::sig","[RFC 2535, Domain Name System Security Extensions, March 1999](https://tools.ietf.org/html/rfc2535#section-4)",null,null],[5,"read","","",null,{"inputs":[{"name":"bindecoder"},{"name":"u16"}],"output":{"name":"decoderesult"}}],[5,"emit","","",null,{"inputs":[{"name":"binencoder"},{"name":"sig"}],"output":{"name":"encoderesult"}}],[5,"emit_pre_sig","","specifically for outputing the RData for an RRSIG, with signer_name in canonical form",null,{"inputs":[{"name":"binencoder"},{"name":"recordtype"},{"name":"algorithm"},{"name":"u8"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u16"},{"name":"name"}],"output":{"name":"encoderesult"}}],[11,"clone","","",24,{"inputs":[{"name":"sig"}],"output":{"name":"sig"}}],[11,"hash","","",24,null],[11,"eq","","",24,{"inputs":[{"name":"sig"},{"name":"sig"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"sig"},{"name":"sig"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"sig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new SIG record data, used for both RRSIG and SIG(0) records.",24,{"inputs":[{"name":"recordtype"},{"name":"algorithm"},{"name":"u8"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u16"},{"name":"name"},{"name":"vec"}],"output":{"name":"sig"}}],[11,"get_type_covered","","[RFC 2535, Domain Name System Security Extensions, March 1999](https://tools.ietf.org/html/rfc2535#section-4.1.1)",24,{"inputs":[{"name":"sig"}],"output":{"name":"recordtype"}}],[11,"get_algorithm","","[RFC 2535, Domain Name System Security Extensions, March 1999](https://tools.ietf.org/html/rfc2535#section-4.1.2)",24,{"inputs":[{"name":"sig"}],"output":{"name":"algorithm"}}],[11,"get_num_labels","","[RFC 2535, Domain Name System Security Extensions, March 1999](https://tools.ietf.org/html/rfc2535#section-4.1.3)",24,{"inputs":[{"name":"sig"}],"output":{"name":"u8"}}],[11,"get_original_ttl","","[RFC 2535, Domain Name System Security Extensions, March 1999](https://tools.ietf.org/html/rfc2535#section-4.1.4)",24,{"inputs":[{"name":"sig"}],"output":{"name":"u32"}}],[11,"get_sig_expiration","","[RFC 2535, Domain Name System Security Extensions, March 1999](https://tools.ietf.org/html/rfc2535#section-4.1.5)",24,{"inputs":[{"name":"sig"}],"output":{"name":"u32"}}],[11,"get_sig_inception","","see `get_sig_expiration`",24,{"inputs":[{"name":"sig"}],"output":{"name":"u32"}}],[11,"get_key_tag","","[RFC 2535, Domain Name System Security Extensions, March 1999](https://tools.ietf.org/html/rfc2535#section-4.1.6)",24,{"inputs":[{"name":"sig"}],"output":{"name":"u16"}}],[11,"get_signer_name","","[RFC 2535, Domain Name System Security Extensions, March 1999](https://tools.ietf.org/html/rfc2535#section-4.1.7)",24,{"inputs":[{"name":"sig"}],"output":{"name":"name"}}],[11,"get_sig","","[RFC 2535, Domain Name System Security Extensions, March 1999](https://tools.ietf.org/html/rfc2535#section-4.1.8)",24,null],[0,"soa","trust_dns::rr::rdata","start of authority record defining ownership and defaults for the zone",null,null],[3,"SOA","trust_dns::rr::rdata::soa","[RFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, November 1987](https://tools.ietf.org/html/rfc1035)",null,null],[5,"read","","",null,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[5,"emit","","",null,{"inputs":[{"name":"binencoder"},{"name":"soa"}],"output":{"name":"encoderesult"}}],[5,"parse","","",null,{"inputs":[{"name":"vec"},{"name":"option"}],"output":{"name":"parseresult"}}],[11,"clone","","",25,{"inputs":[{"name":"soa"}],"output":{"name":"soa"}}],[11,"hash","","",25,null],[11,"eq","","",25,{"inputs":[{"name":"soa"},{"name":"soa"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"soa"},{"name":"soa"}],"output":{"name":"bool"}}],[11,"fmt","","",25,{"inputs":[{"name":"soa"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new SOA record data.",25,{"inputs":[{"name":"name"},{"name":"name"},{"name":"u32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"increment_serial","","Increments the serial number by one",25,{"inputs":[{"name":"soa"}],"output":null}],[11,"get_mname","","```text\nMNAME           The &lt;domain-name&gt; of the name server that was the\n                original or primary source of data for this zone.\n```",25,{"inputs":[{"name":"soa"}],"output":{"name":"name"}}],[11,"get_rname","","```text\nRNAME           A &lt;domain-name&gt; which specifies the mailbox of the\n                person responsible for this zone.\n```",25,{"inputs":[{"name":"soa"}],"output":{"name":"name"}}],[11,"get_serial","","```text\nSERIAL          The unsigned 32 bit version number of the original copy\n                of the zone.  Zone transfers preserve this value.  This\n                value wraps and should be compared using sequence space\n                arithmetic.\n```",25,{"inputs":[{"name":"soa"}],"output":{"name":"u32"}}],[11,"get_refresh","","```text\nREFRESH         A 32 bit time interval before the zone should be\n                refreshed.\n```",25,{"inputs":[{"name":"soa"}],"output":{"name":"i32"}}],[11,"get_retry","","```text\nRETRY           A 32 bit time interval that should elapse before a\n                failed refresh should be retried.\n```",25,{"inputs":[{"name":"soa"}],"output":{"name":"i32"}}],[11,"get_expire","","```text\nEXPIRE          A 32 bit time value that specifies the upper limit on\n                the time interval that can elapse before the zone is no\n                longer authoritative.\n```",25,{"inputs":[{"name":"soa"}],"output":{"name":"i32"}}],[11,"get_minimum","","```text\nMINIMUM         The unsigned 32 bit minimum TTL field that should be\n                exported with any RR from this zone.\n```",25,{"inputs":[{"name":"soa"}],"output":{"name":"u32"}}],[0,"srv","trust_dns::rr::rdata","service records for identify port mapping for specific services on a host",null,null],[3,"SRV","trust_dns::rr::rdata::srv","[RFC 2782, DNS SRV RR, February 2000](https://tools.ietf.org/html/rfc2782)",null,null],[5,"read","","",null,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[5,"emit","","",null,{"inputs":[{"name":"binencoder"},{"name":"srv"}],"output":{"name":"encoderesult"}}],[5,"parse","","",null,{"inputs":[{"name":"vec"},{"name":"option"}],"output":{"name":"parseresult"}}],[11,"clone","","",26,{"inputs":[{"name":"srv"}],"output":{"name":"srv"}}],[11,"hash","","",26,null],[11,"eq","","",26,{"inputs":[{"name":"srv"},{"name":"srv"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"srv"},{"name":"srv"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"srv"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new SRV record data.",26,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"name"}],"output":{"name":"srv"}}],[11,"get_priority","","```text\n Priority\nThe priority of this target host.  A client MUST attempt to\ncontact the target host with the lowest-numbered priority it can\nreach; target hosts with the same priority SHOULD be tried in an\norder defined by the weight field.  The range is 0-65535.  This\nis a 16 bit unsigned integer in network byte order.\n```",26,{"inputs":[{"name":"srv"}],"output":{"name":"u16"}}],[11,"get_weight","","```text\n Weight\nA server selection mechanism.  The weight field specifies a\nrelative weight for entries with the same priority. Larger\nweights SHOULD be given a proportionately higher probability of\nbeing selected. The range of this number is 0-65535.  This is a\n16 bit unsigned integer in network byte order.  Domain\nadministrators SHOULD use Weight 0 when there isn&#39;t any server\nselection to do, to make the RR easier to read for humans (less\nnoisy).  In the presence of records containing weights greater\nthan 0, records with weight 0 should have a very small chance of\nbeing selected.",26,{"inputs":[{"name":"srv"}],"output":{"name":"u16"}}],[11,"get_port","","```text\n Port\nThe port on this target host of this service.  The range is 0-\n65535.  This is a 16 bit unsigned integer in network byte order.\nThis is often as specified in Assigned Numbers but need not be.",26,{"inputs":[{"name":"srv"}],"output":{"name":"u16"}}],[11,"get_target","","```text\n Target\nThe domain name of the target host.  There MUST be one or more\naddress records for this name, the name MUST NOT be an alias (in\nthe sense of RFC 1034 or RFC 2181).  Implementors are urged, but\nnot required, to return the address record(s) in the Additional\nData section.  Unless and until permitted by future standards\naction, name compression is not to be used for this field.",26,{"inputs":[{"name":"srv"}],"output":{"name":"name"}}],[0,"txt","trust_dns::rr::rdata","text records for storing arbitrary data",null,null],[3,"TXT","trust_dns::rr::rdata::txt","[RFC 1035, DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, November 1987](https://tools.ietf.org/html/rfc1035)",null,null],[5,"read","","",null,{"inputs":[{"name":"bindecoder"},{"name":"u16"}],"output":{"name":"decoderesult"}}],[5,"emit","","",null,{"inputs":[{"name":"binencoder"},{"name":"txt"}],"output":{"name":"encoderesult"}}],[5,"parse","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"parseresult"}}],[11,"clone","","",27,{"inputs":[{"name":"txt"}],"output":{"name":"txt"}}],[11,"hash","","",27,null],[11,"eq","","",27,{"inputs":[{"name":"txt"},{"name":"txt"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"txt"},{"name":"txt"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"txt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new TXT record data.",27,{"inputs":[{"name":"vec"}],"output":{"name":"txt"}}],[11,"get_txt_data","","```text\nTXT-DATA        One or more &lt;character-string&gt;s.\n```",27,null],[0,"dnssec","trust_dns::rr","dns security extension related modules",null,null],[3,"Signer","trust_dns::rr::dnssec","Use for performing signing and validation of DNSSec based components.",null,null],[3,"SupportedAlgorithms","","",null,null],[3,"TrustAnchor","","",null,null],[4,"Algorithm","","",null,null],[13,"RSASHA1","","DO NOT USE, SHA1 is a compromised hashing function, it is here for backward compatability",28,null],[13,"RSASHA256","","",28,null],[13,"RSASHA1NSEC3SHA1","","DO NOT USE, SHA1 is a compromised hashing function, it is here for backward compatability",28,null],[13,"RSASHA512","","",28,null],[4,"DigestType","","",null,null],[13,"SHA1","","",29,null],[13,"SHA256","","",29,null],[13,"SHA384","","",29,null],[13,"SHA512","","",29,null],[4,"Nsec3HashAlgorithm","","",null,null],[13,"SHA1","","",30,null],[11,"fmt","","",28,{"inputs":[{"name":"algorithm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",28,{"inputs":[{"name":"algorithm"},{"name":"algorithm"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"algorithm"},{"name":"algorithm"}],"output":{"name":"option"}}],[11,"hash","","",28,null],[11,"eq","","",28,{"inputs":[{"name":"algorithm"},{"name":"algorithm"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"algorithm"}],"output":{"name":"algorithm"}}],[11,"sign","","",28,null],[11,"verify","","",28,null],[11,"from_u8","","http://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml",28,{"inputs":[{"name":"u8"}],"output":{"name":"decoderesult"}}],[11,"hash_len","","length in bytes that the hash portion of this function will produce",28,{"inputs":[{"name":"algorithm"}],"output":{"name":"usize"}}],[11,"public_key_from_vec","","",28,null],[11,"public_key_to_vec","","",28,{"inputs":[{"name":"algorithm"},{"name":"pkey"}],"output":{"name":"vec"}}],[11,"read","","",28,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",28,{"inputs":[{"name":"algorithm"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"from","","",28,{"inputs":[{"name":"str"}],"output":{"name":"algorithm"}}],[11,"fmt","","",29,{"inputs":[{"name":"digesttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",29,{"inputs":[{"name":"digesttype"},{"name":"digesttype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"digesttype"},{"name":"digesttype"}],"output":{"name":"option"}}],[11,"hash","","",29,null],[11,"eq","","",29,{"inputs":[{"name":"digesttype"},{"name":"digesttype"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"digesttype"}],"output":{"name":"digesttype"}}],[11,"from_u8","","http://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml",29,{"inputs":[{"name":"u8"}],"output":{"name":"decoderesult"}}],[11,"to_hash","","",29,{"inputs":[{"name":"digesttype"}],"output":{"name":"type"}}],[11,"hash","","",29,null],[11,"from","","",29,{"inputs":[{"name":"algorithm"}],"output":{"name":"digesttype"}}],[11,"clone","","",30,{"inputs":[{"name":"nsec3hashalgorithm"}],"output":{"name":"nsec3hashalgorithm"}}],[11,"hash","","",30,null],[11,"eq","","",30,{"inputs":[{"name":"nsec3hashalgorithm"},{"name":"nsec3hashalgorithm"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"nsec3hashalgorithm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u8","","http://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml",30,{"inputs":[{"name":"u8"}],"output":{"name":"decoderesult"}}],[11,"hash","","",30,null],[11,"new_verifier","","Version of Signer for verifying RRSIGs and SIG0 records.",31,{"inputs":[{"name":"algorithm"},{"name":"pkey"},{"name":"name"}],"output":{"name":"self"}}],[11,"new","","Version of Signer for signing RRSIGs and SIG0 records.",31,{"inputs":[{"name":"algorithm"},{"name":"pkey"},{"name":"name"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"get_algorithm","","",31,{"inputs":[{"name":"signer"}],"output":{"name":"algorithm"}}],[11,"get_signer_name","","",31,{"inputs":[{"name":"signer"}],"output":{"name":"name"}}],[11,"get_expiration","","",31,{"inputs":[{"name":"signer"}],"output":{"name":"u32"}}],[11,"get_inception","","",31,{"inputs":[{"name":"signer"}],"output":{"name":"u32"}}],[11,"get_pkey","","",31,{"inputs":[{"name":"signer"}],"output":{"name":"pkey"}}],[11,"get_public_key","","",31,{"inputs":[{"name":"signer"}],"output":{"name":"vec"}}],[11,"to_dnskey","","Creates a Record that represents the public key for this Signer",31,{"inputs":[{"name":"signer"},{"name":"name"},{"name":"u32"}],"output":{"name":"record"}}],[11,"calculate_key_tag","","The key tag is calculated as a hash to more quickly lookup a DNSKEY.",31,{"inputs":[{"name":"signer"}],"output":{"name":"u16"}}],[11,"sign_message","","Signs the given message, returning the signature bytes.",31,{"inputs":[{"name":"signer"},{"name":"message"}],"output":{"name":"vec"}}],[11,"verify_message","","Verifies a message with the against the given signature",31,null],[11,"hash_rrset","","name is the the name of the records in the rrset",31,null],[11,"hash_rrset_with_rrsig","","",31,null],[11,"sign","","Signs a hash.",31,null],[11,"verify","","Verifies the hash matches the signature with the current `key`.",31,null],[11,"hash","","",32,null],[11,"clone","","",32,{"inputs":[{"name":"supportedalgorithms"}],"output":{"name":"supportedalgorithms"}}],[11,"eq","","",32,{"inputs":[{"name":"supportedalgorithms"},{"name":"supportedalgorithms"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"supportedalgorithms"},{"name":"supportedalgorithms"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"supportedalgorithms"},{"name":"supportedalgorithms"}],"output":{"name":"option"}}],[11,"lt","","",32,{"inputs":[{"name":"supportedalgorithms"},{"name":"supportedalgorithms"}],"output":{"name":"bool"}}],[11,"le","","",32,{"inputs":[{"name":"supportedalgorithms"},{"name":"supportedalgorithms"}],"output":{"name":"bool"}}],[11,"gt","","",32,{"inputs":[{"name":"supportedalgorithms"},{"name":"supportedalgorithms"}],"output":{"name":"bool"}}],[11,"ge","","",32,{"inputs":[{"name":"supportedalgorithms"},{"name":"supportedalgorithms"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"supportedalgorithms"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"all","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"set","","",32,{"inputs":[{"name":"supportedalgorithms"},{"name":"algorithm"}],"output":null}],[11,"has","","",32,{"inputs":[{"name":"supportedalgorithms"},{"name":"algorithm"}],"output":{"name":"bool"}}],[11,"iter","","",32,{"inputs":[{"name":"supportedalgorithms"}],"output":{"name":"supportedalgorithmsiter"}}],[11,"len","","",32,{"inputs":[{"name":"supportedalgorithms"}],"output":{"name":"u16"}}],[11,"from","","",32,null],[11,"from","collections::vec","",23,{"inputs":[{"name":"supportedalgorithms"}],"output":{"name":"vec"}}],[11,"default","trust_dns::rr::dnssec","",33,{"inputs":[],"output":{"name":"trustanchor"}}],[11,"new","","",33,{"inputs":[],"output":{"name":"trustanchor"}}],[11,"contains","","",33,null],[11,"insert_trust_anchor","","inserts the trust_anchor to the trusted chain",33,{"inputs":[{"name":"trustanchor"},{"name":"vec"}],"output":null}],[0,"authority","trust_dns","Module for `Catalog` of `Authority` zones which are responsible for storing `RRSet` records.",null,null],[3,"Authority","trust_dns::authority","Authority is the storage method for all resource records",null,null],[3,"RrKey","","Accessor key for RRSets in the Authority.",null,null],[3,"Catalog","","Set of authorities, zones, available to this server.",null,null],[3,"RRSet","","Set of resource records associated to a name and type",null,null],[4,"ZoneType","","",null,null],[13,"Master","","",34,null],[13,"Slave","","",34,null],[13,"Hint","","",34,null],[13,"Forward","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"rrkey"}],"output":{"name":"rrkey"}}],[11,"hash","","",35,null],[11,"fmt","","",35,{"inputs":[{"name":"rrkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"rrkey"},{"name":"rrkey"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"rrkey"},{"name":"rrkey"}],"output":{"name":"bool"}}],[11,"new","","Creates a new key to access the Authority.",35,{"inputs":[{"name":"name"},{"name":"recordtype"}],"output":{"name":"rrkey"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"rrkey"},{"name":"rrkey"}],"output":{"name":"option"}}],[11,"cmp","","",35,{"inputs":[{"name":"rrkey"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new Authority.",36,{"inputs":[{"name":"name"},{"name":"btreemap"},{"name":"zonetype"},{"name":"bool"}],"output":{"name":"authority"}}],[11,"add_secure_key","","",36,{"inputs":[{"name":"authority"},{"name":"signer"}],"output":null}],[11,"get_origin","","",36,{"inputs":[{"name":"authority"}],"output":{"name":"name"}}],[11,"get_zone_type","","",36,{"inputs":[{"name":"authority"}],"output":{"name":"zonetype"}}],[11,"get_soa","","Returns the SOA of the authority.",36,{"inputs":[{"name":"authority"}],"output":{"name":"option"}}],[11,"get_soa_secure","","Returns the SOA record",36,{"inputs":[{"name":"authority"},{"name":"bool"}],"output":{"name":"vec"}}],[11,"get_minimum_ttl","","",36,{"inputs":[{"name":"authority"}],"output":{"name":"u32"}}],[11,"get_ns","","",36,{"inputs":[{"name":"authority"},{"name":"bool"}],"output":{"name":"vec"}}],[11,"upsert","","Inserts or updates a `Record` depending on it&#39;s existence in the authority.",36,{"inputs":[{"name":"authority"},{"name":"record"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"update","","Takes the UpdateMessage, extracts the Records, and applies the changes to the record set.",36,{"inputs":[{"name":"authority"},{"name":"message"}],"output":{"name":"updateresult"}}],[11,"search","","Using the specified query, perform a lookup against this zone.",36,{"inputs":[{"name":"authority"},{"name":"query"},{"name":"bool"}],"output":{"name":"vec"}}],[11,"lookup","","Looks up all Resource Records matching the giving `Name` and `RecordType`.",36,{"inputs":[{"name":"authority"},{"name":"name"},{"name":"recordtype"},{"name":"bool"}],"output":{"name":"vec"}}],[11,"get_nsec_records","","Return the NSEC records based on the given name",36,{"inputs":[{"name":"authority"},{"name":"name"},{"name":"bool"}],"output":{"name":"vec"}}],[11,"secure_zone","","(Re)generates the nsec records, increments the serial number nad signs the zone",36,{"inputs":[{"name":"authority"}],"output":null}],[11,"new","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"handle_request","","Determine&#39;s what needs to happen given the type of request, i.e. Query or Update.",37,{"inputs":[{"name":"catalog"},{"name":"message"}],"output":{"name":"message"}}],[11,"error_msg","","",37,{"inputs":[{"name":"u16"},{"name":"opcode"},{"name":"responsecode"}],"output":{"name":"message"}}],[11,"upsert","","",37,{"inputs":[{"name":"catalog"},{"name":"name"},{"name":"authority"}],"output":null}],[11,"update","","Update the zone given the Update request.",37,{"inputs":[{"name":"catalog"},{"name":"message"}],"output":{"name":"message"}}],[11,"lookup","","Given the requested query, lookup and return any matching results.",37,{"inputs":[{"name":"catalog"},{"name":"message"}],"output":{"name":"message"}}],[11,"fmt","","",38,{"inputs":[{"name":"rrset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new Resource Record Set.",38,{"inputs":[{"name":"name"},{"name":"recordtype"},{"name":"u32"}],"output":{"name":"rrset"}}],[11,"get_name","","# Return value",38,{"inputs":[{"name":"rrset"}],"output":{"name":"name"}}],[11,"get_record_type","","# Return value",38,{"inputs":[{"name":"rrset"}],"output":{"name":"recordtype"}}],[11,"get_ttl","","# Return value",38,{"inputs":[{"name":"rrset"}],"output":{"name":"u32"}}],[11,"get_records","","# Return value",38,{"inputs":[{"name":"rrset"},{"name":"bool"}],"output":{"name":"vec"}}],[11,"is_empty","","# Return value",38,{"inputs":[{"name":"rrset"}],"output":{"name":"bool"}}],[11,"get_serial","","# Return value",38,{"inputs":[{"name":"rrset"}],"output":{"name":"u32"}}],[11,"get_rrsigs","","",38,null],[11,"insert_rrsig","","",38,{"inputs":[{"name":"rrset"},{"name":"record"}],"output":null}],[11,"clear_rrsigs","","",38,{"inputs":[{"name":"rrset"}],"output":null}],[11,"insert","","Inserts a new Resource Record into the Set.",38,{"inputs":[{"name":"rrset"},{"name":"record"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"remove","","Removes the Resource Record if it exists.",38,{"inputs":[{"name":"rrset"},{"name":"record"},{"name":"u32"}],"output":{"name":"bool"}}],[6,"UpdateResult","","",null,null],[11,"clone","","",34,{"inputs":[{"name":"zonetype"}],"output":{"name":"zonetype"}}],[11,"fmt","","",34,{"inputs":[{"name":"zonetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"zonetype"},{"name":"zonetype"}],"output":{"name":"bool"}}],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[0,"op","trust_dns","Operations to send with a `Client` or server, e.g. `Query`, `Message`, or `UpdateMessage` can\nbe used to gether to either query or update resource records sets.",null,null],[3,"Edns","trust_dns::op","Edns implements the higher level concepts for working with Edns as it is used to create or be\ncreated from OPT record data.",null,null],[0,"op_code","","Operation code for queries, updates, and responses",null,null],[4,"OpCode","trust_dns::op::op_code","Operation code for queries, updates, and responses",null,null],[13,"Query","","Query request [RFC 1035](https://tools.ietf.org/html/rfc1035)",39,null],[13,"Status","","Status message [RFC 1035](https://tools.ietf.org/html/rfc1035)",39,null],[13,"Notify","","Notify of change [RFC 1996](https://tools.ietf.org/html/rfc1996)",39,null],[13,"Update","","Update message [RFC 2136](https://tools.ietf.org/html/rfc2136)",39,null],[11,"clone","","",39,{"inputs":[{"name":"opcode"}],"output":{"name":"opcode"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"opcode"},{"name":"opcode"}],"output":{"name":"option"}}],[11,"eq","","",39,{"inputs":[{"name":"opcode"},{"name":"opcode"}],"output":{"name":"bool"}}],[11,"fmt","","",39,{"inputs":[{"name":"opcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",39,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[0,"response_code","trust_dns::op","All defined response codes in DNS",null,null],[4,"ResponseCode","trust_dns::op::response_code","The status code of the response to a query.",null,null],[13,"NoError","","No Error [RFC 1035](https://tools.ietf.org/html/rfc1035)",40,null],[13,"FormErr","","Format Error [RFC 1035](https://tools.ietf.org/html/rfc1035)",40,null],[13,"ServFail","","Server Failure [RFC 1035](https://tools.ietf.org/html/rfc1035)",40,null],[13,"NXDomain","","Non-Esistent Domain [RFC 1035](https://tools.ietf.org/html/rfc1035)",40,null],[13,"NotImp","","Not Implemented [RFC 1035](https://tools.ietf.org/html/rfc1035)",40,null],[13,"Refused","","Query Refused [RFC 1035](https://tools.ietf.org/html/rfc1035)",40,null],[13,"YXDomain","","Name Exists when it should not [RFC 2136](https://tools.ietf.org/html/rfc2136)",40,null],[13,"YXRRSet","","RR Set Exists when it should not [RFC 2136](https://tools.ietf.org/html/rfc2136)",40,null],[13,"NXRRSet","","RR Set that should exist does not [RFC 2136](https://tools.ietf.org/html/rfc2136)",40,null],[13,"NotAuth","","Server Not Authoritative for zone [RFC 2136](https://tools.ietf.org/html/rfc2136)\nor Not Authorized [RFC 2845](https://tools.ietf.org/html/rfc2845)",40,null],[13,"NotZone","","Name not contained in zone [RFC 2136](https://tools.ietf.org/html/rfc2136)",40,null],[13,"BADVERS","","Bad OPT Version [RFC 6891](https://tools.ietf.org/html/rfc6891#section-9)",40,null],[13,"BADSIG","","TSIG Signature Failure [RFC 2845](https://tools.ietf.org/html/rfc2845)",40,null],[13,"BADKEY","","Key not recognized [RFC 2845](https://tools.ietf.org/html/rfc2845)",40,null],[13,"BADTIME","","Signature out of time window [RFC 2845](https://tools.ietf.org/html/rfc2845)",40,null],[13,"BADMODE","","Bad TKEY Mode [RFC 2930](https://tools.ietf.org/html/rfc2930#section-2.6)",40,null],[13,"BADNAME","","Duplicate key name [RFC 2930](https://tools.ietf.org/html/rfc2930#section-2.6)",40,null],[13,"BADALG","","Algorithm not supported [RFC 2930](https://tools.ietf.org/html/rfc2930#section-2.6)",40,null],[13,"BADTRUNC","","Bad Truncation [RFC 4635](https://tools.ietf.org/html/rfc4635#section-4)",40,null],[13,"BADCOOKIE","","Bad/missing server cookie [draft-ietf-dnsop-cookies](https://tools.ietf.org/html/draft-ietf-dnsop-cookies-10)",40,null],[11,"clone","","",40,{"inputs":[{"name":"responsecode"}],"output":{"name":"responsecode"}}],[11,"partial_cmp","","",40,{"inputs":[{"name":"responsecode"},{"name":"responsecode"}],"output":{"name":"option"}}],[11,"eq","","",40,{"inputs":[{"name":"responsecode"},{"name":"responsecode"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"responsecode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"low","","returns the lower 4 bits of the response code (for the original header portion of the code)",40,{"inputs":[{"name":"responsecode"}],"output":{"name":"u8"}}],[11,"high","","returns the high 12 bits for the edns portion of the response code",40,{"inputs":[{"name":"responsecode"}],"output":null}],[11,"from","","",40,{"inputs":[{"name":"u8"},{"name":"u8"}],"output":{"name":"responsecode"}}],[11,"to_str","","",40,{"inputs":[{"name":"responsecode"}],"output":{"name":"str"}}],[11,"from","","",40,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[0,"message","trust_dns::op","Basic protocol message for DNS",null,null],[3,"Message","trust_dns::op::message","The basic request and response datastructure, used for all DNS protocols.",null,null],[8,"UpdateMessage","","to reduce errors in using the Message struct as an Update, this will do the call throughs\nto properly do that.",null,null],[10,"get_id","","",41,{"inputs":[{"name":"updatemessage"}],"output":{"name":"u16"}}],[10,"add_zone","","",41,{"inputs":[{"name":"updatemessage"},{"name":"query"}],"output":null}],[10,"add_pre_requisite","","",41,{"inputs":[{"name":"updatemessage"},{"name":"record"}],"output":null}],[10,"add_all_pre_requisites","","",41,null],[10,"add_update","","",41,{"inputs":[{"name":"updatemessage"},{"name":"record"}],"output":null}],[10,"add_all_updates","","",41,null],[10,"add_additional","","",41,{"inputs":[{"name":"updatemessage"},{"name":"record"}],"output":null}],[10,"get_zones","","",41,null],[10,"get_pre_requisites","","",41,null],[10,"get_updates","","",41,null],[10,"get_additional","","",41,null],[10,"get_sig0","","This is used to authenticate update messages.",41,null],[10,"sign","","",41,{"inputs":[{"name":"updatemessage"},{"name":"signer"},{"name":"u32"}],"output":null}],[11,"eq","","",42,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"message"},{"name":"message"}],"output":{"name":"bool"}}],[11,"fmt","","",42,{"inputs":[{"name":"message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",42,{"inputs":[],"output":{"name":"self"}}],[11,"truncate","","",42,{"inputs":[{"name":"message"}],"output":{"name":"self"}}],[11,"id","","",42,{"inputs":[{"name":"message"},{"name":"u16"}],"output":{"name":"self"}}],[11,"message_type","","",42,{"inputs":[{"name":"message"},{"name":"messagetype"}],"output":{"name":"self"}}],[11,"op_code","","",42,{"inputs":[{"name":"message"},{"name":"opcode"}],"output":{"name":"self"}}],[11,"authoritative","","",42,{"inputs":[{"name":"message"},{"name":"bool"}],"output":{"name":"self"}}],[11,"truncated","","",42,{"inputs":[{"name":"message"},{"name":"bool"}],"output":{"name":"self"}}],[11,"recursion_desired","","",42,{"inputs":[{"name":"message"},{"name":"bool"}],"output":{"name":"self"}}],[11,"recursion_available","","",42,{"inputs":[{"name":"message"},{"name":"bool"}],"output":{"name":"self"}}],[11,"authentic_data","","",42,{"inputs":[{"name":"message"},{"name":"bool"}],"output":{"name":"self"}}],[11,"checking_disabled","","",42,{"inputs":[{"name":"message"},{"name":"bool"}],"output":{"name":"self"}}],[11,"response_code","","",42,{"inputs":[{"name":"message"},{"name":"responsecode"}],"output":{"name":"self"}}],[11,"add_query","","",42,{"inputs":[{"name":"message"},{"name":"query"}],"output":{"name":"self"}}],[11,"add_answer","","",42,{"inputs":[{"name":"message"},{"name":"record"}],"output":{"name":"self"}}],[11,"add_all_answers","","",42,null],[11,"add_name_server","","",42,{"inputs":[{"name":"message"},{"name":"record"}],"output":{"name":"self"}}],[11,"add_all_name_servers","","",42,null],[11,"add_additional","","",42,{"inputs":[{"name":"message"},{"name":"record"}],"output":{"name":"self"}}],[11,"set_edns","","",42,{"inputs":[{"name":"message"},{"name":"edns"}],"output":null}],[11,"add_sig0","","",42,{"inputs":[{"name":"message"},{"name":"record"}],"output":{"name":"self"}}],[11,"get_id","","see `Header::get_id()`",42,{"inputs":[{"name":"message"}],"output":{"name":"u16"}}],[11,"get_message_type","","see `Header::get_message_type()`",42,{"inputs":[{"name":"message"}],"output":{"name":"messagetype"}}],[11,"get_op_code","","see `Header::get_op_code()`",42,{"inputs":[{"name":"message"}],"output":{"name":"opcode"}}],[11,"is_authoritative","","see `Header::is_authoritative()`",42,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"is_truncated","","see `Header::is_truncated()`",42,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"is_recursion_desired","","see `Header::is_recursion_desired()`",42,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"is_recursion_available","","see `Header::is_recursion_available()`",42,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"is_authentic_data","","see `Header::is_authentic_data()`",42,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"is_checking_disabled","","see `Header::is_checking_disabled()`",42,{"inputs":[{"name":"message"}],"output":{"name":"bool"}}],[11,"get_response_code","","# Return value",42,{"inputs":[{"name":"message"}],"output":{"name":"responsecode"}}],[11,"get_queries","","```text\nQuestion        Carries the query name and other query parameters.\n```",42,null],[11,"get_answers","","```text\nAnswer          Carries RRs which directly answer the query.\n```",42,null],[11,"get_name_servers","","```text\nAuthority       Carries RRs which describe other authoritative servers.\n                May optionally carry the SOA RR for the authoritative\n                data in the answer section.\n```",42,null],[11,"get_additional","","```text\nAdditional      Carries RRs which may be helpful in using the RRs in the\n                other sections.\n```",42,null],[11,"get_edns","","[RFC 6891, EDNS(0) Extensions, April 2013](https://tools.ietf.org/html/rfc6891#section-6.1.1)",42,{"inputs":[{"name":"message"}],"output":{"name":"option"}}],[11,"get_max_payload","","# Return value",42,{"inputs":[{"name":"message"}],"output":{"name":"u16"}}],[11,"get_version","","# Return value",42,{"inputs":[{"name":"message"}],"output":{"name":"u8"}}],[11,"get_id","","",42,{"inputs":[{"name":"message"}],"output":{"name":"u16"}}],[11,"add_zone","","",42,{"inputs":[{"name":"message"},{"name":"query"}],"output":null}],[11,"add_pre_requisite","","",42,{"inputs":[{"name":"message"},{"name":"record"}],"output":null}],[11,"add_all_pre_requisites","","",42,null],[11,"add_update","","",42,{"inputs":[{"name":"message"},{"name":"record"}],"output":null}],[11,"add_all_updates","","",42,null],[11,"add_additional","","",42,{"inputs":[{"name":"message"},{"name":"record"}],"output":null}],[11,"get_zones","","",42,null],[11,"get_pre_requisites","","",42,null],[11,"get_updates","","",42,null],[11,"get_additional","","",42,null],[11,"get_sig0","","",42,null],[11,"sign","","",42,{"inputs":[{"name":"message"},{"name":"signer"},{"name":"u32"}],"output":null}],[11,"read","","",42,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",42,{"inputs":[{"name":"message"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[0,"header","trust_dns::op","Message metadata",null,null],[3,"Header","trust_dns::op::header","Metadata for the `Message` struct.",null,null],[4,"MessageType","","",null,null],[13,"Query","","",43,null],[13,"Response","","",43,null],[11,"partial_cmp","","",44,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"fmt","","",44,{"inputs":[{"name":"header"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"messagetype"}],"output":{"name":"messagetype"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"messagetype"},{"name":"messagetype"}],"output":{"name":"option"}}],[11,"eq","","",43,{"inputs":[{"name":"messagetype"},{"name":"messagetype"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"messagetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","A default Header, not very useful.",44,{"inputs":[],"output":{"name":"self"}}],[11,"len","","",44,{"inputs":[],"output":{"name":"usize"}}],[11,"id","","",44,{"inputs":[{"name":"header"},{"name":"u16"}],"output":{"name":"self"}}],[11,"message_type","","",44,{"inputs":[{"name":"header"},{"name":"messagetype"}],"output":{"name":"self"}}],[11,"op_code","","",44,{"inputs":[{"name":"header"},{"name":"opcode"}],"output":{"name":"self"}}],[11,"authoritative","","",44,{"inputs":[{"name":"header"},{"name":"bool"}],"output":{"name":"self"}}],[11,"truncated","","",44,{"inputs":[{"name":"header"},{"name":"bool"}],"output":{"name":"self"}}],[11,"recursion_desired","","",44,{"inputs":[{"name":"header"},{"name":"bool"}],"output":{"name":"self"}}],[11,"recursion_available","","",44,{"inputs":[{"name":"header"},{"name":"bool"}],"output":{"name":"self"}}],[11,"authentic_data","","",44,{"inputs":[{"name":"header"},{"name":"bool"}],"output":{"name":"self"}}],[11,"checking_disabled","","",44,{"inputs":[{"name":"header"},{"name":"bool"}],"output":{"name":"self"}}],[11,"response_code","","",44,{"inputs":[{"name":"header"},{"name":"responsecode"}],"output":{"name":"self"}}],[11,"query_count","","",44,{"inputs":[{"name":"header"},{"name":"u16"}],"output":{"name":"self"}}],[11,"answer_count","","",44,{"inputs":[{"name":"header"},{"name":"u16"}],"output":{"name":"self"}}],[11,"name_server_count","","",44,{"inputs":[{"name":"header"},{"name":"u16"}],"output":{"name":"self"}}],[11,"additional_count","","",44,{"inputs":[{"name":"header"},{"name":"u16"}],"output":{"name":"self"}}],[11,"get_id","","```text\nID              A 16 bit identifier assigned by the program that\n                generates any kind of query.  This identifier is copied\n                the corresponding reply and can be used by the requester\n                to match up replies to outstanding queries.\n```",44,{"inputs":[{"name":"header"}],"output":{"name":"u16"}}],[11,"get_message_type","","```text\nQR              A one bit field that specifies whether this message is a\n                query (0), or a response (1).\n```",44,{"inputs":[{"name":"header"}],"output":{"name":"messagetype"}}],[11,"get_op_code","","```text\nOPCODE          A four bit field that specifies kind of query in this\n                message.  This value is set by the originator of a query\n                and copied into the response.  The values are: &lt;see super::op_code&gt;\n```",44,{"inputs":[{"name":"header"}],"output":{"name":"opcode"}}],[11,"is_authoritative","","```text\nAA              Authoritative Answer - this bit is valid in responses,\n                and specifies that the responding name server is an\n                authority for the domain name in question section.",44,{"inputs":[{"name":"header"}],"output":{"name":"bool"}}],[11,"is_truncated","","```text\nTC              TrunCation - specifies that this message was truncated\n                due to length greater than that permitted on the\n                transmission channel.\n```",44,{"inputs":[{"name":"header"}],"output":{"name":"bool"}}],[11,"is_recursion_desired","","```text\nRD              Recursion Desired - this bit may be set in a query and\n                is copied into the response.  If RD is set, it directs\n                the name server to pursue the query recursively.\n                Recursive query support is optional.\n```",44,{"inputs":[{"name":"header"}],"output":{"name":"bool"}}],[11,"is_recursion_available","","```text\nRA              Recursion Available - this be is set or cleared in a\n                response, and denotes whether recursive query support is\n                available in the name server.\n```",44,{"inputs":[{"name":"header"}],"output":{"name":"bool"}}],[11,"is_authentic_data","","[RFC 4035, DNSSEC Resource Records, March 2005](https://tools.ietf.org/html/rfc4035#section-3.1.6)",44,{"inputs":[{"name":"header"}],"output":{"name":"bool"}}],[11,"is_checking_disabled","","see `is_authentic_data()`",44,{"inputs":[{"name":"header"}],"output":{"name":"bool"}}],[11,"get_response_code","","```text\nRCODE           Response code - this 4 bit field is set as part of\n                responses.  The values have the following\n                interpretation: &lt;see super::response_code&gt;\n```",44,{"inputs":[{"name":"header"}],"output":{"name":"u8"}}],[11,"get_query_count","","```text\nQDCOUNT         an unsigned 16 bit integer specifying the number of\n                entries in the question section.\n```",44,{"inputs":[{"name":"header"}],"output":{"name":"u16"}}],[11,"get_answer_count","","```text\nANCOUNT         an unsigned 16 bit integer specifying the number of\n                resource records in the answer section.\n```",44,{"inputs":[{"name":"header"}],"output":{"name":"u16"}}],[11,"get_name_server_count","","for queries this is the nameservers which are authorities for the SOA of the Record\nfor updates this is the update record count\n```text\nNSCOUNT         an unsigned 16 bit integer specifying the number of name\n                server resource records in the authority records\n                section.\n```",44,{"inputs":[{"name":"header"}],"output":{"name":"u16"}}],[11,"get_additional_count","","```text\nARCOUNT         an unsigned 16 bit integer specifying the number of\n                resource records in the additional records section.\n```",44,{"inputs":[{"name":"header"}],"output":{"name":"u16"}}],[11,"clone","","This is a specialized clone which clones all the fields but the counts\nhandy for setting the count fields before sending over the wire.",44,{"inputs":[{"name":"header"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"read","","",44,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",44,{"inputs":[{"name":"header"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[0,"query","trust_dns::op","Query struct for looking up resource records",null,null],[3,"Query","trust_dns::op::query","Query struct for looking up resource records, basically a resource record without RDATA.",null,null],[11,"fmt","","",45,{"inputs":[{"name":"query"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"query"},{"name":"query"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"query"},{"name":"query"}],"output":{"name":"bool"}}],[11,"new","","return a default query with an empty name and A, IN for the query_type and query_class",45,{"inputs":[],"output":{"name":"self"}}],[11,"name","","replaces name with the new name",45,{"inputs":[{"name":"query"},{"name":"name"}],"output":{"name":"self"}}],[11,"query_type","","",45,{"inputs":[{"name":"query"},{"name":"recordtype"}],"output":{"name":"self"}}],[11,"query_class","","",45,{"inputs":[{"name":"query"},{"name":"dnsclass"}],"output":{"name":"self"}}],[11,"get_name","","```text\nQNAME           a domain name represented as a sequence of labels, where\n                each label consists of a length octet followed by that\n                number of octets.  The domain name terminates with the\n                zero length octet for the null label of the root.  Note\n                that this field may be an odd number of octets; no\n                padding is used.\n```",45,{"inputs":[{"name":"query"}],"output":{"name":"name"}}],[11,"get_query_type","","```text\nQTYPE           a two octet code which specifies the type of the query.\n                The values for this field include all codes valid for a\n                TYPE field, together with some more general codes which\n                can match more than one type of RR.\n```",45,{"inputs":[{"name":"query"}],"output":{"name":"recordtype"}}],[11,"get_query_class","","```text\nQCLASS          a two octet code that specifies the class of the query.\n                For example, the QCLASS field is IN for the Internet.\n```",45,{"inputs":[{"name":"query"}],"output":{"name":"dnsclass"}}],[11,"read","","",45,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",45,{"inputs":[{"name":"query"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"clone","trust_dns::op","",46,{"inputs":[{"name":"edns"}],"output":{"name":"edns"}}],[11,"eq","","",46,{"inputs":[{"name":"edns"},{"name":"edns"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"edns"},{"name":"edns"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"edns"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",46,{"inputs":[],"output":{"name":"self"}}],[11,"get_rcode_high","","",46,{"inputs":[{"name":"edns"}],"output":{"name":"u8"}}],[11,"get_version","","",46,{"inputs":[{"name":"edns"}],"output":{"name":"u8"}}],[11,"is_dnssec_ok","","",46,{"inputs":[{"name":"edns"}],"output":{"name":"bool"}}],[11,"get_max_payload","","",46,{"inputs":[{"name":"edns"}],"output":{"name":"u16"}}],[11,"get_option","","",46,{"inputs":[{"name":"edns"},{"name":"ednscode"}],"output":{"name":"option"}}],[11,"get_options","","",46,{"inputs":[{"name":"edns"}],"output":{"name":"opt"}}],[11,"set_rcode_high","","",46,{"inputs":[{"name":"edns"},{"name":"u8"}],"output":null}],[11,"set_version","","",46,{"inputs":[{"name":"edns"},{"name":"u8"}],"output":null}],[11,"set_dnssec_ok","","",46,{"inputs":[{"name":"edns"},{"name":"bool"}],"output":null}],[11,"set_max_payload","","",46,{"inputs":[{"name":"edns"},{"name":"u16"}],"output":null}],[11,"set_option","","",46,{"inputs":[{"name":"edns"},{"name":"ednsoption"}],"output":null}],[11,"from","","",46,{"inputs":[{"name":"record"}],"output":{"name":"self"}}],[11,"from","trust_dns::rr::resource","This returns a Resource Record that is formatted for Edns(0).\nNote: the rcode_high value is only part of the rcode, the rest is part of the base",10,{"inputs":[{"name":"edns"}],"output":{"name":"record"}}],[0,"udp","trust_dns","UDP protocol related components for DNS.",null,null],[3,"UdpHandler","trust_dns::udp","",null,null],[3,"UdpClientConnection","","UDP based DNS client",null,null],[4,"UdpState","","",null,null],[13,"Reading","","",47,null],[13,"Writing","","",47,null],[13,"Done","","",47,null],[11,"new_client","","",48,{"inputs":[{"name":"socketaddr"},{"name":"message"}],"output":{"name":"self"}}],[11,"new_server","","",48,{"inputs":[{"name":"udpsocket"},{"name":"arc"}],"output":{"name":"option"}}],[11,"remote_addr","","",48,{"inputs":[{"name":"udphandler"}],"output":{"name":"socketaddr"}}],[11,"serialize_msg","","",48,{"inputs":[{"name":"vec"},{"name":"message"}],"output":{"name":"vec"}}],[11,"handle_message","","",48,{"inputs":[{"name":"udphandler"},{"name":"udpsocket"},{"name":"eventset"}],"output":{"name":"result"}}],[11,"new","","Creates a new client connection.",49,{"inputs":[{"name":"socketaddr"}],"output":{"name":"clientresult"}}],[11,"send","","",49,{"inputs":[{"name":"udpclientconnection"},{"name":"vec"}],"output":{"name":"clientresult"}}],[11,"fmt","","",49,{"inputs":[{"name":"udpclientconnection"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"tcp","trust_dns","TCP protocol related components for DNS.",null,null],[3,"TcpHandler","trust_dns::tcp","",null,null],[3,"TcpClientConnection","","TCP based DNS client",null,null],[4,"TcpState","","",null,null],[13,"WillReadLength","","",50,null],[13,"WillRead","","",50,null],[12,"length","trust_dns::tcp::TcpState","",50,null],[13,"WillWriteLength","trust_dns::tcp","",50,null],[13,"WillWrite","","",50,null],[13,"Done","","",50,null],[11,"new_client_handler","","initializes this handler with the intention to write first",51,{"inputs":[{"name":"tcpstream"}],"output":{"name":"self"}}],[11,"new_server_handler","","initializes this handler with the intention to read first",51,{"inputs":[{"name":"tcpstream"}],"output":{"name":"self"}}],[11,"get_stream","","",51,{"inputs":[{"name":"tcphandler"}],"output":{"name":"tcpstream"}}],[11,"get_events","","",51,{"inputs":[{"name":"tcphandler"}],"output":{"name":"eventset"}}],[11,"set_buffer","","",51,{"inputs":[{"name":"tcphandler"},{"name":"vec"}],"output":null}],[11,"remove_buffer","","",51,{"inputs":[{"name":"tcphandler"}],"output":{"name":"vec"}}],[11,"get_buffer","","",51,null],[11,"get_buffer_mut","","",51,{"inputs":[{"name":"tcphandler"}],"output":{"name":"vec"}}],[11,"handle_message","","The result may be an error case of ErrorKind::WouldBlock, which means that the handler\nhandler should be put back into the event loop for more processing.",51,{"inputs":[{"name":"tcphandler"},{"name":"eventset"}],"output":{"name":"result"}}],[11,"reset","","resets the state of the handler to perform more requests if desired.\nclears the buffers and sets the state back to the initial state",51,{"inputs":[{"name":"tcphandler"}],"output":null}],[11,"fmt","","",50,{"inputs":[{"name":"tcpstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"tcpstate"}],"output":{"name":"tcpstate"}}],[11,"eq","","",50,{"inputs":[{"name":"tcpstate"},{"name":"tcpstate"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"tcpstate"},{"name":"tcpstate"}],"output":{"name":"bool"}}],[11,"initial_state","","",50,{"inputs":[{"name":"tcptype"}],"output":{"name":"self"}}],[11,"next_state","","",50,{"inputs":[{"name":"tcpstate"},{"name":"tcptype"}],"output":{"name":"self"}}],[11,"new","","Creates a new client connection.",52,{"inputs":[{"name":"socketaddr"}],"output":{"name":"clientresult"}}],[11,"send","","",52,{"inputs":[{"name":"tcpclientconnection"},{"name":"vec"}],"output":{"name":"clientresult"}}],[11,"fmt","","",52,{"inputs":[{"name":"tcpclientconnection"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"client","trust_dns","Use `Client` along with `trust_dns::udp::UdpClientConnection` or\n`trust_dns::tcp::TcpClientConnection`.",null,null],[3,"Client","trust_dns::client","The Client is abstracted over either trust_dns::tcp::TcpClientConnection or\ntrust_dns::udp::UdpClientConnection, usage of TCP or UDP is up to the user. Some DNS servers\ndisallow TCP in some cases, so if TCP double check if UDP works.",null,null],[11,"new","","Creates a new DNS client with the specified connection type",53,{"inputs":[{"name":"c"}],"output":{"name":"client"}}],[11,"with_trust_anchor","","This variant allows for the trust_anchor to be replaced",53,{"inputs":[{"name":"c"},{"name":"trustanchor"}],"output":{"name":"client"}}],[11,"secure_query","","DNSSec validating query, this will return an error if the requested records can not be\n validated against the trust_anchor.",53,{"inputs":[{"name":"client"},{"name":"name"},{"name":"dnsclass"},{"name":"recordtype"}],"output":{"name":"clientresult"}}],[11,"query","","A *classic* DNS query, i.e. does not perform and DNSSec operations",53,{"inputs":[{"name":"client"},{"name":"name"},{"name":"dnsclass"},{"name":"recordtype"}],"output":{"name":"clientresult"}}],[11,"create","","Sends a record to create on the server, this will fail if the record exists (atomicity\n depends on the server)",53,{"inputs":[{"name":"client"},{"name":"record"},{"name":"name"},{"name":"signer"}],"output":{"name":"clientresult"}}],[11,"append","","Appends a record to an existing rrset, optionally require the rrset to exis (atomicity\n depends on the server)",53,{"inputs":[{"name":"client"},{"name":"record"},{"name":"name"},{"name":"bool"},{"name":"signer"}],"output":{"name":"clientresult"}}],[11,"compare_and_swap","","Compares and if it matches, swaps it for the new value (atomicity depends on the server)",53,{"inputs":[{"name":"client"},{"name":"record"},{"name":"record"},{"name":"name"},{"name":"signer"}],"output":{"name":"clientresult"}}],[11,"delete_by_rdata","","Deletes a record (by rdata) from an rrset, optionally require the rrset to exist.",53,{"inputs":[{"name":"client"},{"name":"record"},{"name":"name"},{"name":"signer"}],"output":{"name":"clientresult"}}],[11,"delete_rrset","","Deletes an entire rrset, optionally require the rrset to exist.",53,{"inputs":[{"name":"client"},{"name":"record"},{"name":"name"},{"name":"signer"}],"output":{"name":"clientresult"}}],[11,"delete_all","","Deletes all records at the specified name",53,{"inputs":[{"name":"client"},{"name":"name"},{"name":"name"},{"name":"dnsclass"},{"name":"signer"}],"output":{"name":"clientresult"}}],[8,"ClientConnection","","Trait for client connections",null,null],[10,"send","","Sends a serialized message to via this connection, returning the serialized response.",54,{"inputs":[{"name":"clientconnection"},{"name":"vec"}],"output":{"name":"clientresult"}}],[0,"server","trust_dns","`Server` component for hosting a domain name servers operations.",null,null],[3,"Server","trust_dns::server","",null,null],[11,"new","","",55,{"inputs":[{"name":"catalog"}],"output":{"name":"server"}}],[11,"register_socket","","register a UDP socket. Should be bound before calling this.",55,{"inputs":[{"name":"server"},{"name":"udpsocket"}],"output":null}],[11,"register_listener","","register a TcpListener to the Server. This should already be bound to either an IPv6 or an\nIPv4 address.",55,{"inputs":[{"name":"server"},{"name":"tcplistener"}],"output":null}],[11,"listen","","TODO how to do threads? should we do a bunch of listener threads and then query threads?\nIdeally the processing would be n-threads for recieving, which hand off to m-threads for\n request handling. It would generally be the case that n &lt;= m.",55,{"inputs":[{"name":"server"}],"output":{"name":"result"}}],[11,"ready","","",55,{"inputs":[{"name":"server"},{"name":"eventloop"},{"name":"token"},{"name":"eventset"}],"output":null}],[11,"interrupted","","",55,{"inputs":[{"name":"server"},{"name":"eventloop"}],"output":null}],[0,"serialize","trust_dns","Contains serialization libraries for `binary` and text, `txt`.",null,null],[0,"binary","trust_dns::serialize","",null,null],[3,"BinDecoder","trust_dns::serialize::binary","This is non-destructive to the inner buffer, b/c for pointer types we need to perform a reverse\n seek to lookup names",null,null],[3,"BinEncoder","","Encode DNS messages and resource record types.",null,null],[4,"EncodeMode","","In the Verify mode there maybe some things which are encoded differently, e.g. SIG0 records\nshould not be included in the additional count and not in the encoded data when in Verify",null,null],[13,"Signing","","",56,null],[13,"Normal","","",56,null],[11,"new","","",57,null],[11,"pop","","",57,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"len","","",57,{"inputs":[{"name":"bindecoder"}],"output":{"name":"usize"}}],[11,"peek","","",57,{"inputs":[{"name":"bindecoder"}],"output":{"name":"option"}}],[11,"index","","",57,{"inputs":[{"name":"bindecoder"}],"output":{"name":"usize"}}],[11,"clone","","This is a pretty efficient clone, as the buffer is never cloned, and only the index is set\nto the value passed in",57,{"inputs":[{"name":"bindecoder"},{"name":"u16"}],"output":{"name":"bindecoder"}}],[11,"read_character_data","","&lt;character-string&gt; is a single\nlength octet followed by that number of characters.  &lt;character-string&gt;\nis treated as binary information, and can be up to 256 characters in\nlength (including the length octet).",57,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"read_vec","","",57,{"inputs":[{"name":"bindecoder"},{"name":"usize"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",57,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","parses the next 2 bytes into u16. This performs a byte-by-byte manipulation, there\n which means endianness is implicitly handled (i.e. no network to little endian (intel), issues)",57,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","parses the next four bytes into i32. This performs a byte-by-byte manipulation, there\n which means endianness is implicitly handled (i.e. no network to little endian (intel), issues)",57,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","parses the next four bytes into u32. This performs a byte-by-byte manipulation, there\n which means endianness is implicitly handled (i.e. no network to little endian (intel), issues)",57,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"new","","",58,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"with_mode","","",58,{"inputs":[{"name":"vec"},{"name":"encodemode"}],"output":{"name":"self"}}],[11,"with_offset","","offset is used mainly for pointers. If this encoder is starting at some point further in\nthe sequence of bytes, for the proper offset of the pointer, the offset accounts for that\nby using the offset to add to the pointer location being written.",58,{"inputs":[{"name":"vec"},{"name":"u32"},{"name":"encodemode"}],"output":{"name":"self"}}],[11,"as_bytes","","",58,{"inputs":[{"name":"binencoder"}],"output":{"name":"vec"}}],[11,"len","","",58,{"inputs":[{"name":"binencoder"}],"output":{"name":"usize"}}],[11,"offset","","",58,{"inputs":[{"name":"binencoder"}],"output":{"name":"u32"}}],[11,"mode","","",58,{"inputs":[{"name":"binencoder"}],"output":{"name":"encodemode"}}],[11,"set_canonical_names","","",58,{"inputs":[{"name":"binencoder"},{"name":"bool"}],"output":null}],[11,"is_canonical_names","","",58,{"inputs":[{"name":"binencoder"}],"output":{"name":"bool"}}],[11,"reserve","","",58,{"inputs":[{"name":"binencoder"},{"name":"usize"}],"output":null}],[11,"emit","","",58,{"inputs":[{"name":"binencoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"store_label_pointer","","store the label pointer, the location is the current position in the buffer\nimplicitly, it is expected that the name will be written to the stream after this.",58,{"inputs":[{"name":"binencoder"},{"name":"vec"}],"output":null}],[11,"get_label_pointer","","",58,null],[11,"emit_character_data","","matches description from above.",58,{"inputs":[{"name":"binencoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",58,{"inputs":[{"name":"binencoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",58,{"inputs":[{"name":"binencoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",58,{"inputs":[{"name":"binencoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_vec","","",58,null],[11,"eq","","",56,{"inputs":[{"name":"encodemode"},{"name":"encodemode"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"encodemode"}],"output":{"name":"encodemode"}}],[8,"BinSerializable","","",null,null],[10,"read","","",59,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[10,"emit","","",59,{"inputs":[{"name":"binserializable"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[11,"read","collections::vec","",23,{"inputs":[{"name":"bindecoder"}],"output":{"name":"decoderesult"}}],[11,"emit","","",23,{"inputs":[{"name":"vec"},{"name":"binencoder"}],"output":{"name":"encoderesult"}}],[0,"txt","trust_dns::serialize","",null,null],[3,"Parser","trust_dns::serialize::txt","```text\n5. MASTER FILES",null,null],[3,"Lexer","","",null,null],[4,"Token","","",null,null],[13,"Blank","","",60,null],[13,"List","","",60,null],[13,"CharData","","",60,null],[13,"At","","",60,null],[13,"Include","","",60,null],[13,"Origin","","",60,null],[13,"Ttl","","",60,null],[13,"EOL","","",60,null],[11,"new","","",61,{"inputs":[{"name":"str"}],"output":{"name":"lexer"}}],[11,"next_token","","",61,{"inputs":[{"name":"lexer"}],"output":{"name":"lexerresult"}}],[11,"clone","","",60,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"fmt","","",60,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"new","","",62,{"inputs":[],"output":{"name":"self"}}],[11,"parse_file","","",62,{"inputs":[{"name":"file"},{"name":"option"},{"name":"zonetype"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"parse","","",62,{"inputs":[{"name":"parser"},{"name":"lexer"},{"name":"option"},{"name":"zonetype"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"parse_time","","parses the string following the rules from:\n https://tools.ietf.org/html/rfc2308 (NXCaching RFC) and\n http://www.zytrax.com/books/dns/apa/time.html",62,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"config","trust_dns","Configuration module for the server binary, `named`.",null,null],[3,"Config","trust_dns::config","",null,null],[3,"ZoneConfig","","",null,null],[11,"fmt","","",63,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"read_config","","read a Config file from the file specified at path.",63,{"inputs":[{"name":"path"}],"output":{"name":"configresult"}}],[11,"get_listen_addrs_ipv4","","",63,{"inputs":[{"name":"config"}],"output":{"name":"vec"}}],[11,"get_listen_addrs_ipv6","","",63,{"inputs":[{"name":"config"}],"output":{"name":"vec"}}],[11,"get_listen_port","","",63,{"inputs":[{"name":"config"}],"output":{"name":"u16"}}],[11,"get_log_level","","",63,{"inputs":[{"name":"config"}],"output":{"name":"loglevel"}}],[11,"get_directory","","",63,{"inputs":[{"name":"config"}],"output":{"name":"path"}}],[11,"get_zones","","",63,null],[11,"from_str","","",63,{"inputs":[{"name":"str"}],"output":{"name":"configresult"}}],[11,"fmt","","",64,{"inputs":[{"name":"zoneconfig"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"zoneconfig"},{"name":"zoneconfig"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"zoneconfig"},{"name":"zoneconfig"}],"output":{"name":"bool"}}],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"get_zone","","",64,{"inputs":[{"name":"zoneconfig"}],"output":{"name":"parseresult"}}],[11,"get_zone_type","","",64,{"inputs":[{"name":"zoneconfig"}],"output":{"name":"zonetype"}}],[11,"get_file","","",64,{"inputs":[{"name":"zoneconfig"}],"output":{"name":"pathbuf"}}],[11,"get_allow_udpate","","",64,{"inputs":[{"name":"zoneconfig"}],"output":{"name":"bool"}}]],"paths":[[3,"ErrorLoc"],[4,"DecodeError"],[4,"EncodeError"],[4,"ClientError"],[4,"LexerError"],[4,"ParseError"],[4,"ConfigError"],[3,"TrustDnsLogger"],[4,"RecordType"],[4,"DNSClass"],[3,"Record"],[4,"RData"],[3,"Name"],[3,"DS"],[3,"DNSKEY"],[3,"MX"],[3,"NULL"],[3,"NSEC"],[3,"NSEC3"],[3,"NSEC3PARAM"],[4,"EdnsCode"],[4,"EdnsOption"],[3,"OPT"],[3,"Vec"],[3,"SIG"],[3,"SOA"],[3,"SRV"],[3,"TXT"],[4,"Algorithm"],[4,"DigestType"],[4,"Nsec3HashAlgorithm"],[3,"Signer"],[3,"SupportedAlgorithms"],[3,"TrustAnchor"],[4,"ZoneType"],[3,"RrKey"],[3,"Authority"],[3,"Catalog"],[3,"RRSet"],[4,"OpCode"],[4,"ResponseCode"],[8,"UpdateMessage"],[3,"Message"],[4,"MessageType"],[3,"Header"],[3,"Query"],[3,"Edns"],[4,"UdpState"],[3,"UdpHandler"],[3,"UdpClientConnection"],[4,"TcpState"],[3,"TcpHandler"],[3,"TcpClientConnection"],[3,"Client"],[8,"ClientConnection"],[3,"Server"],[4,"EncodeMode"],[3,"BinDecoder"],[3,"BinEncoder"],[8,"BinSerializable"],[4,"Token"],[3,"Lexer"],[3,"Parser"],[3,"Config"],[3,"ZoneConfig"]]};
initSearch(searchIndex);
